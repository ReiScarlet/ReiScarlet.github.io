{"meta":{"title":"Reimilia","subtitle":"","description":"Reimilia's Blog","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"关于","text":"欢迎来到我的个人主页，Have a good time! ヾ(≧▽≦*)o 于2021/4/2：使用Hexo在Github上建立了该博客 于2021/4/3：更新主题为NexT 于2021/4/4：更新主题为gal P.S. 如果有谁想一起建个人主页的，可以通过”关于”联系我一起探讨 联系QQ:2285345090","path":"about/index.html","date":"04-02","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"04-02","excerpt":""},{"title":"分类","text":"","path":"categories/index.html","date":"04-02","excerpt":""}],"posts":[{"title":"定点数的乘、除法运算","text":"移位分为算术移位，逻辑移位和循环移位三类，它们又可以分为左移和右移 算术移位规则原码的移位规则：负数的原码移位后的空出位补0 补码的移位规则： 负数的补码左移后的空出位补0 负数的补码右移后的空出位补1 移位功能的实现：通过移位操作由移位寄存器来实现，也有在加法器的输出的加一个实现直传、左移一位和右移一位的控制逻辑电路（称为移位器） 定点乘法运算原码一位乘法的规则为： 参加运算的操作数取其绝对值 令乘数的最低位为判断位 若位1，加被乘数 若为0，不加被乘数 累加后的部分积右移一位（这里是逻辑移位） 重复n次2，3步 符号位单独处理，同号为正，异号为负 例题： 已知：X=0.1101, Y=-0.1011, 求X*Y \\\\ |X| = 00.1101 \\rightarrow B, \\\\ |Y| = .1011 \\rightarrow C, 0 \\rightarrow A \\\\ 补码一位乘法校正法： 被乘数任意，乘数为正：同原码乘，但加和移位按补码规则运算，乘积的符 号自然形成 被乘数任意，乘数为负：乘数$[Y]_{补}$，去掉符号位，操作同①，最后加$[-X]_{补}$，校正 Booth算法： 以小数为例子： 设$[X]_补 = X_s.X_1X_2…X_n\\quad[Y]_补=Y_S.Y_1Y_2…Y_n$ $[X*Y]_补 $ $ = [X]_补(0.Y_1Y_2…Y_n) - [X]_补 * Y_s$ $=[X]_补(Y_12^{-1}+Y_22^{-2}+…+Y_n2^{-n}) - [X]_补*Y_s$ $=[X]_补\\ (-Y_s + Y_12^{-1} + Y_22^{-2} + … + Y_n2^{-n})$ $=[X]_补=[-Y_s + (Y_1 - Y_12^{-1}) + (Y_22^{-1} - Y_22^{-2}) + … + (Y_n2^{-(n-1)}-Y_n2^{-n})]$ $=[X]_补 = [(Y_1-Y_s) + (Y_2 - Y_1)2^{-1} + … + (Y_n - Y_{n-1}2^{-(n-1)}) + (0 - Y_n)2^{-n}]$ 递推公式： [Z_0]_补 = 0\\\\ [Z_1]_补 = 2^{-1}\\{[Z_0]_补 + (Y_{n+1}-Y_{n})[X]_补\\}\\\\ [Z_2]_补 = 2^{-1}\\{[Z_1]_补 + (Y_{n}-Y_{n-1})[X]_补\\}\\\\ ...\\\\ [Z_n]_补 = 2^{-1}\\{[Z_n-1]_补 + (Y_{2}-Y_{1})[X]_补\\}\\\\ \\therefore [X*Y]_补 = [Z_n]_补 + (Y_1 - Y_s)[X]_补其中，$[Z_0]_补$为初始部分积，$[Z_1]_补\\sim[Z_n]_补$依次为各次求得的累加并右移之后的部分积 描述：对于乘数$[Y]_补 = Y_1Y_2…Y_n$,被乘数$[X]_补=X_1X_2….X_n$ 若乘数当前位为1，下一位为0，则用部分积减去乘数，得到新的部分积 若乘数当前位为0，下一位为1，则用部分积加上乘数，得到新的部分积 若乘数当前位与下一位相同，则什么都不做 上诉操作后按照补码规则右移 注意事项： 当被乘数与部分积相加时，产生的进位将被丢弃 部分积移位时，使用算数移位，最高位补符号位 乘法开始时，乘数的当前位（n）为其最低位，下一位（n+1）为0 定点数的除法运算比较法原码恢复余数法步骤： 将除数的最高位与被除数的最高位对齐 从部分被除数中减去除数，得到新的部分被除数 若新的部分被除数为负，则商左移一位，最低位补0，并用新的部分被除数加上除数，恢复原先的部分被除数 若新的部分被除数为正，则商左移一位，最低位补1 判断除法是否结束。若除数的最低位与部分被除数的最低位对齐，则除法结束。最后的部分被除数就是余数 将除数右移1位，从第②步继续执行 原码恢复余数法在计算机中一般很少采用 原码不恢复余数除法和原码恢复余数除法的区别是： 若新的部分被除数为正，商左移一位，最低位补1，部分被除数减去除数 先对除数进行右移再判断新的部分被除数为正为负 例题： 假设X=-0.10101,Y=0.11110,求X\\div Y\\\\ 预先准备:\\\\ |X|=00.10101 \\rightarrow A \\\\ |Y|=00.11110 \\rightarrow B \\\\ 0 \\rightarrow C \\\\ [|Y|]_{变补} = 11.00010","path":"2021/04/10/定点数的乘法运算/","date":"04-10","excerpt":"移位分为算术移位，逻辑移位和循环移位三类，它们又可以分为左移和右移","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"运算方法和运算器","slug":"运算方法和运算器","permalink":"http://example.com/tags/%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E5%99%A8/"}]},{"title":"行列式介绍","text":"对于一个2*2的矩阵$A = \\begin{bmatrix} a&amp;b \\\\ c&amp;d \\end{bmatrix}$，如果它是可逆的，则它的行列式非零，记作$det A = ad-bc \\neq 0$ 定义当$n\\ge2$，n*n的矩阵$A=[a_{ij}]$的行列式$detA = \\sum_{j=1}^n(-1)^{1+j}a_{1j}detA_{1j}$ 余因子：给定$A=[a_{ij}],A的(i, j)余因子C_{ij}=(-1)^{i+j}detA_{ij}$ 则，$detA = \\sum_{j=1}^na_{1j}C_{1j}$ 余因子$C_{ij}$就是矩阵A除了$A_{ij}$所在的 i 行和 j 列其他的行列所组成的矩阵行列式的行列式 定理1： n*n矩阵A的行列式可按任意行或列的余因子展开式来计算，按第i行展开为： $detA=\\sum_{j=1}^na_{ij}C_{ij}$ 按第j列的余因子展开式为： $detA=\\sum_{i=1}^na_{ij}C_{ij}$ 定理2：若A为三角阵，则detA等于A的主对角线上元素的乘积 行列式的性质定理3：令A是一个方阵： A的某一行的倍数加到另一会得到矩阵B，det B = det A A的两行互换得到矩阵B，det B = - det A A的某行乘以k得到矩阵B， det B = k * det A 这样我们就可以将A化简为阶梯形，再利用三角形矩阵的行列式等于对角线上元素之积计算行列式了 定理4：方阵A是可逆的当且仅当$det A \\neq 0$ 推论：若A的列或行是线性相关的，即是有两行或两列是零行或者是相等的，则$det A = 0$ 定理5：若A为一个n*n的矩阵，则$det A^T = det A$ 定理6：若A和B均为n*n的矩阵，则$det AB = (det A)(det B)$ 推论：$det A^n = (det A)^n$ 警告：一般来说$det (A+B) \\neq det A + det B$ 克拉默法则、体积和线性变换定理7（克拉默法则）：设A是一个可逆的n*n矩阵，对R^n中任意向量b，方程Ax=b的唯一解可由下式给出： ​ $x_i = \\frac{detA_i(b)}{det A}, i=1,2,…n $ 一个求$A^{-1}$的公式： 伴随矩阵：记作adj A 解释： 对于矩阵A = \\begin{bmatrix} 2 & 1 & 3 \\\\ 1 & -1 & 1 \\\\ 1 & 4 & -2 \\end{bmatrix} \\\\ 九个余因子为 \\\\ C_{11} = + \\left |\\begin{array}{cccc} -1 & 1 \\\\ 4 & -2 \\end{array}\\right| = -2, C_{12} = - \\left |\\begin{array}{cccc} 1 & 1 \\\\ 1 & -2 \\end{array}\\right| = 3, C_{13} = + \\left |\\begin{array}{cccc} 1 & -1 \\\\ 1 & 4 \\end{array}\\right| = 5 \\\\ C_{21} = - \\left |\\begin{array}{cccc} 1 & 3 \\\\ 4 & -2 \\end{array}\\right| = 14, C_{22} = + \\left |\\begin{array}{cccc} 2 & 3 \\\\ 1 & -2 \\end{array}\\right| = -7, C_{23} = - \\left |\\begin{array}{cccc} 2 & 1 \\\\ 1 & 4 \\end{array}\\right| = -7 \\\\ C_{31} = + \\left |\\begin{array}{cccc} 1 & 3 \\\\ -1 & 1 \\end{array}\\right| = 4, C_{32} = - \\left |\\begin{array}{cccc} 2 & 3 \\\\ 1 & 1 \\end{array}\\right| = 1, C_{33} = + \\left |\\begin{array}{cccc} 2 & 1 \\\\ 1 & -1 \\end{array}\\right| = -3\\\\ 则伴随矩阵adj A = \\begin{bmatrix} -2 & 14 & 4 \\\\ 3 & -7 & 1 \\\\ 5 & -7 & -3 \\end{bmatrix}定理8(逆矩阵公式)：设A是一个可逆的n*n的矩阵，则$A^{-1} = \\frac{1}{det A}adj A$ 习题 证明：如果A可逆，则$det A^{-1} = \\frac{1}{det A}$ \\because A是可逆的 \\\\ \\therefore det(A^{-1}A) = det E = 1 \\\\ \\therefore det(A^{-1}A)= (detA^{-1})(detA) \\\\ \\therefore det A^{-1} = \\frac{1}{det A} 假设A为方阵，且$det A^3 = 0$，为什么A不可能是可逆的 \\because detA^3 = det(AAA)= 0 \\\\ \\therefore det(AAA) = (det A)^3 = 0 \\\\ \\therefore det A = 0 \\\\ \\therefore A不可逆 若A，P均为方阵，P可逆，证明$det(PAP^{-1}) = det A$ \\because det(PAP^{-1}) = det(P)det(A)det(P^{-1}) \\\\ \\therefore det(PAP^{-1}) = det(PP^{-1})det(A) \\\\ \\therefore det(PAP^{-1}) = det(I) det(A) \\\\ \\therefore det(PAP^{-1}) = det A 若A为一个n*n的矩阵，试找出一个计算det(rA)的公式 det(rA) = r^ndet A 假设U为方阵，满足$U^TU=I$,证明$det U = \\pm1$ det U^TU = det(U^T)det(U) = (det(U))^2 \\\\ \\because U^TU = I \\\\ \\therefore det(U^TU) = det I = 1 \\\\ \\therefore (det\\ U)^2 = 1 \\\\ \\therefore det U = \\pm 1","path":"2021/04/10/行列式/","date":"04-10","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"行列式","slug":"行列式","permalink":"http://example.com/tags/%E8%A1%8C%E5%88%97%E5%BC%8F/"}]},{"title":"子空间,基，秩和维数","text":"R^n的子空间定义：R^n的一个子空间是R^n中的集合H，具有以下三个性质： 零向量属于H 对H中的任意向量u和v，向量u+v属于H 对H中的任意向量u和c，向量cu属于H 仅含零向量的集合，称为零子空间 定义：矩阵A的列空间是A的各列的线性组合的集合，记作Col A 定义：矩阵A的零空间是齐次方程Ax=0的所有解的集合，记作Nul A 当线性方程组写成Ax=b的形式时，A的列空间是所有使方程组有解的向量b的集合 定理12：m*n矩阵A的零空间是R^n的子空间 子空间的基定义：R^n的子空间H的一组基是H中的一个线性无关集，它生成H 定理13：矩阵A的主元列构成A的列空间的基 维数和秩定义：假设$B={b_1,…,b_p}$是子空间H的一组基，对H中的每一个向量x，相对于基B的坐标是使$x=c_1b_1+…+c_pb_p$成立的权$c_1…c_p$，且$R^p$中向量$[x]_B = \\begin{bmatrix} c_1 \\\\ . \\\\ . \\\\ . \\\\ c_p \\end{bmatrix}$，称为x（相对于B）的坐标向量，或x的B-坐标向量 子空间的维度定义：非零子空间H的维数dim H是H的任意一个基的向量个数，零子空间{0}的维度定义为零 定义：矩阵A的秩rank A是A的列空间的维数 因为A的主元列形成Col A的一个基，故A的秩为A的主元列的个数 定理14：如果一矩阵A有n列，则rank A + dim Nul A = n 定理15：设H是R^n的p维子空间，H中的任何恰好由p个元素组成的线性无关集构成H的一个基，并且，H中任何生成H的p个向量集也构成H的一个基 秩与可逆矩阵定理设A是n*n矩阵，则下面的每个命题与A是可逆矩阵的命题等价： A的列向量构成R^n的一个基 Col A = R^n dim Col A = n rank A = n Nul A = {0} dim Nul A = 0","path":"2021/04/08/2.8R^n的子空间/","date":"04-08","excerpt":"","tags":[{"name":"矩阵代数","slug":"矩阵代数","permalink":"http://example.com/tags/%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"AlexNet学习笔记","text":"AlexNet的亮点： 首次使用了GPU进行网络加速训练 使用ReLU激活函数，而不是传统的Sigmoid或者Tanh激活函数 使用了LRN局部响应归一化 在全连接的前两层中使用Dropout随机失活神经元操作，避免过拟合 过拟合特征维度过多，模型假设过于复杂，参数过多，训练数据过少，噪声过多等导致拟合的函数完美的预测训练集，但对新数据的测试集预测效果差。 过度拟合了训练数据而没有考虑泛化能力 AlexNet详解Conv1： kernels：48 * 2 = 96 kernel_size ：11 padding : [1, 2] stride = 4 input_size = [224, 224, 3] output_size = [55, 55, 96] MaxPool1: kernel_size = 3 padding = 0 stride = 2 input_size = [55, 55, 96] output_size = [27, 27, 96] Conv2： kernels = 128 * 2 = 256 kernel_size = 5 padding = [2, 2] stride = 1 input_size = [27, 27, 96] output_size = [27, 27, 256] MaxPool2 kernel_size = 3 padding = 0 stride = 2 input_size = [27, 27, 256] output_size = [13, 13, 256] Conv3 kernels : 192 * 2 = 384 kernel_size : 3 padding = [1, 1] stride = 1 input_size = [13, 13, 256] output_size = [13, 13, 384] Conv4 kernels = 192 * 2 = 384 kernel_size = 3 padding = [1, 1] stride = 1 input_size = [13, 13, 384] output_size = [13, 13, 384] Conv5 kernels = 128 * 2 = 256 kernel_size = 3 padding = [1, 1] stride = 1 input_size = [13, 13, 384] output_size = [13, 13, 256] MaxPool3 kernel_size = 3 padding = 0 stride = 2 input_size = [13, 13, 256] output_size = [6, 6, 256] 注意最后一层，输出的结点为分类的类数目","path":"2021/04/05/AlexNet学习笔记/","date":"04-05","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"IP地址","text":"IPIP地址是因特网上主机和路由器使用的地址，用于标识两部分信息： 网络编号：标识因特网上的网络 主机编号：标识同一网络的不同主机或路由器接口 数据报转发过程中IP地址和MAC地址的变化情况 数据包转发过程中源IP地址和目的IP地址保持不变 数据包转发过程中源MAC地址和目的MAC地址逐个链路或逐个网络改变 IP数据报的发送和转发过程源网络地址：将自己的IP地址和子网掩码相与得到 目的网络地址：将目的IP地址和自己的子网掩码相与得到 如果源网络地址和目的网络地址不同，则两个主机不在同个网络，属于间接交付，则由相应的路由器将IP数据报转发给目的主机 那么源主机如何知道将IP数据报交给哪个路由器？为了和其他网络中的主机通信，就必须指定本网络中的一个路由器，由该路由器进行转发，所指定的路由器也称为默认网关 则源主机和不同网络的目的主机通信时，将IP数据报交付给默认网关，由默认网关帮忙转发IP数据报给目的主机 路由器收到IP数据报后如何转发？ 检查IP数据报的首部是否出错。若出错则丢弃并通告源主机 根据IP数据报的目的地址在路由表中查找匹配的条目，若找不到就丢弃并通告源主机，若找到转发给条目指定的下一跳 目的网络地址：将目的地址和路由条目中的地址掩码相与得到 路由器隔离广播域","path":"2021/04/05/IP地址/","date":"04-05","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"CRC循环冗余码","text":"CRC循环冗余码 收发双方约好一个生成多项式$G(x)$ 发送方基于待发送的数据和生成多项式计算出差错检测码(冗余码)，将其添加到待传输数据的后面一起传输 接收方通过生成多项式来计算收到的数据是否产生误码 例如： \\begin{align} G(x) &= x^4 + x^2 + x + 1 \\\\ &= 1x^4 + 0x^3 + 1x^2 + 1x + 1 \\end{align}生成多项式各项系数构成的比特串为：10111 常用的生成多项式： CRC-16: $x^{16} + x^{15} + x^2 + 1$ CRC-CCITT: $x^{16} + x^{12} + x^{5} + 1$ CRC-32：$x^{32} + x^{26} + x^{23} + x^{22} + x^{16} + x^{12} + x^{11} + x^{10} + x^{8} + x^{7} + x^{5} + x^{4} + x^{2} + x + 1$ 计算差错检测码： 构造被除数，待发送信息后面添加生成多项式最高次数个0 构造除数：生成多项式的比特串 做”除法”,这里除法是将代被除数和除数进行异或 检查余数：余数的位数与多项式最高次数相同，位数不同则补0 发送方： 接收方： 无法纠正错误，检错能力很好，计算复杂但易于用硬件实现，纠错码开销较大，计算机网络较少使用","path":"2021/04/05/CRC循环冗余码/","date":"04-05","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"MAC","text":"MACMAC地址(物理地址、硬件地址·)一般被固化在网卡的电可擦可编程只读存储器EEPROM中 严格来说：MAC地址是对网络上各接口的唯一标识而不是网络上各设备的唯一标识 MAC地址包含两部分：前24比特是组织唯一标识符(OUI)，由IEEE统一分配给设备制造商；后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配 标准表示法：每4个比特写成一个16进制的字符，两个字符一组共六组，组之间用‘-’或‘：’连接，例如XX-XX-XX-XX-XX-XX MAC地址中，第一字节的第7个比特取0表示全球管理，取1表示本地管理 IEEE802.3：MAC地址中，一个字节是$b_7b_6b_5b_4b_3b_2b_1b_0$，比特发送顺序是$b_0\\rightarrow b_7$。字节发送顺序是第一字节到第六字节","path":"2021/04/05/MAC/","date":"04-05","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"4.3-1 IPv4","text":"网际协议版本4（英语：Internet Protocol version 4，IPv4），又称互联网通信协议第四版，是网际协议开发过程中的第四个修订版本，也是此协议第一个被广泛部署的版本。IPv4是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6，直到2011年，IANA IPv4位址完全用尽时，IPv6仍处在部署的初期 网络层的主要任务是实现网络互连，进而实现数据包在网络之间的传输 实现网络层的任务，需要解决以下主要问题： 网络层向运输层提供怎样的服务 网络层寻址问题 路由选择问题 IPV4就是因特网上的每一个主机的每一个接口分配在一个在全世界范围内是唯一的32比特的标识符 IPV4数据报的首部形式 首部长度：占4比特，表示IP数据报首部的长度，该字段的取值以4字节为单位。 最小十进制取值为5，表示IP数据报首部只有20字节固定部分 最大十进制取值为15，表示IP数据报首部包含20字节固定部分和40字节的可变部分 可选字段：长度从1到40字节不等，用来支持排错，测量及安全措施 填充字段：确保首部长度为4字节的整数倍，使用全0进行填充 总长度：占16比特，表示IP数据报的总长度(首部+数据载荷)，最大取值65535字节 标识、标志、片偏移：共同用于IP数据报分片，当IP数据报长度超过MUT（首部+数据载荷）时将数据报分成几份 标志：占3比特，各比特含义如下： DF位：1表示不允许分片。0表示允许 MF位：1表示后面还有分片，0表示这是最后一个分片 保留位：必须为0 标识：占16比特，属于同个数据报的数据报分片应该具有相同的标识。IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将该值赋给标识字段 片偏移：占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有几个单位 生存时间TTL：8比特，路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器所耗费的时间，若不为0就转发，否则就丢弃 协议：占8比特，指明IPv4数据报部分是何种协议数据单元，常用的一些协议和相应的协议字段值如下 ICMP：1 IGMP：2 TCP：6 UDP：17 IPv6：41 OSPF：89 首部检验和：占16比特，用来检测首部在传输过程中是否出现差错，成为因特网检验和，IPv6中路由器不在计算首部校验和，从而更快的转发IP数据报。由于转发过程中标识等字段可变，所有首部校验和可变 IPv4地址概述因为32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用点分十进制表示方法以方便用户使用 将32比特的IPv4按每8位分为一组，写出每组的十进制数，在四个组间加上小数点 分类编址的IPv4地址： A类地址：8位网络号，24位主机号，网络号的最高位固定位0 B类地址：16位网络号，16位主机号，网络号的最高两位固定为10 C类地址：24位网络号，8位主机号，网络号的最高三位固定为110 D类地址：多播地址. 网络号的最高四位固定为1110 E类地址：保留为今后使用，网络号的最高四位固定为1111 只有A，C，B类地址可分配给主机或路由器的各接口 A类地址：最大网络号127作为本地唤回测试地址，不指派。最小网络号0，保留不指派。可指派的网络数量是$2^8 - 2 = 126$，则可配分的IP地址位$2^{24} - 2 = 16777214$(减去2是除去主机号全0的网络地址和全1的广播地址) B类地址：最小网络号也是第一个可指派的网络号128.0。最大网络号也是最后一个可指派网络号为191.255。可指派的网络号为$2^{(16-2)} = 16384$，每个网络可指派的IP地址为$2^{16} - 2 = 65534$ C类地址：最小网络号也是第一个可指派的网络号为192.0.0。最大网络号也是最后一个可指派网络号为223.255.255。可指派的网络号为$2^{(24-3)} = 2097152$。每个网络可指派的IP地址为$2^8 - 2 = 254$ 一些特殊的IP地址地址0.0.0.0是一个特殊的IPv4地址，只能作为源地址使用，表示“在本网络上的本主机”，封装有DHCP DIscovery报文的IP分组的源地址使用0.0.0.0，不能作为目的地址 受限广播地址：地址255.255.255.255是一个特殊的IPv4地址，只能作为目的地址使用，表示”在本网络上进行进行广播“，各路油器不转发 127.X.X.X是环回地址，127.0.0.1 特指本机地址。 224.0.0.1 组播地址。从224.0.0.0到239.255.255.255都是这样的地址。224.0.0.1特指所有主机，224.0.0.2特指所有路由器。 0.X.X.X。该系列地址仅用来标识主机 169.256.X.X。该系列地址是本地地址，是由操作系统分配，路由器不转发 划分子网的IPv4地址为新增网络申请新的网络号会带来以下弊端： 需要等待和花费更多费用 会增加其他路由器中路由表记录的数量 浪费原有网络中剩余的大量IP地址 所以我们可以从主机号部分借用一部分作为子网号 计算机如何知道分类地址中主机号有多少比特被用作子网号？ 32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号 子网掩码使用连续的比特1来对应网络号和子网号 子网掩码使用连续的比特0来对应主机号 将划分子网的IPv4地址与相对应的子网掩码进行逻辑与运算就可以得到IPv4地址所在的子网的网络地址 默认子网掩码：指在未划分子网的情况下使用子网掩码。A类地址未255.0.0.0，B类地址为255.255.0.0，C类地址为255.255.255.0 无分类编址的IPv4地址无分类域间路由选择CIDR。 CIDR消除了传统A，B ,C类地址以及划分子网的概念 CIDR可以更有效地分配IPv4的地址空间 CIDR使用斜线记法，在IPv4地址后面加上斜线”/“，在斜线后面写上网络前缀(网络号)所占的比特数量 CIDR实际上是将网络前缀都相同的连续IP地址组成一个”CIDR地址块“ 只要知道CIDR地址块的任何一个地址，就可以知道该地址块的全部细节： 地址块的最小地址 地址块的最大地址 地址块的地址数量 地址块聚合某类网络的数量 地址掩码 路由聚合（构造超网） 如何构造：找出路由表中目的地址的共同前缀，然后将找到的共同前缀的后一个字节写成2进制的形式，找出地址的共同前缀，然后计算共同前缀的比特位，并将共同前缀写成点分十进制的形式。在斜杠后写上刚才计算的比特位，得到聚合地址块 网络前缀越长，地址块越小，路由越具体 若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，因为这样的路由更具体 IPv4的应用规划定长子网掩码FLSM变长子网掩码VLSM在一个网络划分成n个子网时，计算出每个子网所需的主机地址，路由器接口地址，网络地址，广播地址，算出所有需要的主机号数目。得出每个子网所需主机号的位数，计算出每个子网对应的网络前缀位数。 分配过程中，每个子块的起点位置不能随意选取，只能选取块大小整数倍地址作为起点，一般先给大的子块分配","path":"2021/04/04/IPv4首部格式/","date":"04-04","excerpt":"网际协议版本4（英语：Internet Protocol version 4，IPv4），又称互联网通信协议第四版，是网际协议开发过程中的第四个修订版本，也是此协议第一个被广泛部署的版本。IPv4是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6，直到2011年，IANA IPv4位址完全用尽时，IPv6仍处在部署的初期","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"4.1数据传输过程及以太网帧结构","text":"TCP/IP支持多种不同的数据链路层协议，这取决于网络所使用的硬件。基于不同硬件的网络使用不同形式的帧结构，以太网是当今应用最广泛的局域网技术。 以太网传输的数据帧有两种格式：Ethernet II帧结构、IEEE 802.3格式 两种协议的区别是： Ethernet II格式包含一个类型类型(Type)字段，标识以太帧处理完成之后将被发送到哪个上层协议及逆行处理 IEEE 802.3个格式中，同样的位置是长度(Length)字段 如何区分两种协议： Length/Type \\ge 1536(0x0600) \\quad Ethernet II \\\\ Length/Type \\le 1500(0x05DC) \\quad IEEE 802.3**目前以太网大多数数据帧使用的Ethernet II格式** 以太网在数据链路层通过MAC地址来唯一识别网络设备，并且实现局域网上网络设备之间的通信。 MAC地址也叫物理地址、硬件地址，大多数网卡厂商把MAC地址烧入网卡的ROM中，网络设备的MAC地址是全球唯一的 局域网帧的发送方式 单播：指从单一源端发送到单一的目的端。MAC地址中，第一字节第八个比特($b_0$)表示地址类型。对于主机MAC地址，这个比特固定位0 广播：指帧从单一的源端发送到共享以太网上的所有主机。广播帧的目的MAC地址为16进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接受并处理这个帧 组播：组播转发可以理解为选择性的广播，组播MAC地址通过第一字节第八个比特($b_0$)区分，这个比特为1 以太网帧标识封装成帧：指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧 帧头和帧尾包含有重要的控制信息 帧头和帧尾的作用之一就是 以太网通过增加前同步码和帧开始定界符来标识一个帧的开始和结束 在传输媒体上实际传送的要比MAC帧还要多8个字节(由硬件生成)。这8个字节由两个字段构成，第一个字段是7个字节的前同步码(1和0交替码)。第二个字段是帧开始定界符，定义为10101011 以太网帧校验采用CRC校验 由于以太网规定了帧间间隔时间96比特的发送时间，因此MAC帧不需要帧结束定界符 透明传输：数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样1. 面向字节的物理链路使用字节填充(字符填充)来实现透明传输 面向比特的物理链路使用比特填充的方法实现透明传输 在传输数据时，发送方数据链路层收到上层交付的协议数据单元，添加帧头和帧尾使之成为帧。但是如果数据中恰好包含这个特定数值，接收方将无法正确的接收数据。 面向字节：这个时候在发送帧之前，对帧的数据部分进行扫描。每出现一个帧定界符(flag)就在它前面添加一个转义字符(ESC), 面向比特：例如帧定界标志为01111110，在发送前对帧的数据部分进行扫描，每连续出现五个1就插入一个0，这样防止数据中出现帧定界标志 转义字符是一种特殊的控制字符，其长度一个字节，十进制值为27 为了提高帧的传输速率，应当使帧的数据部分长度尽可能的大些 考虑到差错控制多种因素，每一种数据链路层都规定了帧的数据部分长度上限，也就是最大传输单元MTU MAC地址，IP地址和ARP协议MAC地址是以太网的MAC子网所使用的地址，位于数据链路层 IP地址是TCP/IP体系结构的网络层所使用的地址 ARP协议属于TCP/IP体系结构的网络层。其作用是已知设备所分配的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址","path":"2021/04/04/数据传输过程及以太网帧结构/","date":"04-04","excerpt":"TCP/IP支持多种不同的数据链路层协议，这取决于网络所使用的硬件。基于不同硬件的网络使用不同形式的帧结构，以太网是当今应用最广泛的局域网技术。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"4.2 PPP协议","text":"PPP(Point-to-Point Protocol, P2P)是目前使用最广泛的点对点数据链路层协议 PPP主要由以下三部分组成： 对各种协议的数据报的封装方法 链路控制协议LCP，用于建立、配置以及测试数据链路的连接 一套网络控制协议NCPs，对每一个协议支持不同的网络协议 标志(Flag):PPP帧的定界符，取值为0x7E 地址(Address)：取值为0xFF,预留 控制(Control)：取值为0x03，预留 协议(Protocol)：指明帧的数据部分送交哪个协议处理： 取值0x0021：帧的数据部分为IP数据报 取值0xC021：帧的数据部分为LCP分组 取值0x8021：帧的数据部分为NCP分组 帧检测序列(FCS, Frame Check Sequence)：CRC计算出的校验码 PPP协议的工作状态： 注意：PAP认证过程是两次握手，而CHAP认证是3次握手，CHAP认证比PAP认证的安全性高","path":"2021/04/04/PPP协议/","date":"04-04","excerpt":"PPP(Point-to-Point Protocol, P2P)是目前使用最广泛的点对点数据链路层协议 PPP主要由以下三部分组成： 对各种协议的数据报的封装方法 链路控制协议LCP，用于建立、配置以及测试数据链路的连接 一套网络控制协议NCPs，对每一个协议支持不同的网络协议","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"张量Tensor","text":"张量是什么一方面，日常直觉和物理研究告诉人们，同一物理量的值，在不同的坐标系往往是不同的，物理学家希望自己研究的对象，如果去除坐标系变换的影响，应该是同一个量，于是把这些符合某种坐标变换法则的物理量称为张量 想象一个平整的纸张是二维空间，上面的点A用一个长度和方向来表示（XY坐标轴表示：A（x1，y1）），将纸弯曲，这个二维空间上A点的表示方法不变，但是以更高维的空间来看，这个点和之前平整纸张的A点却不是同一位置的点了，但是都用A（x1,y1）描述,说明用一个长度和方向已经不能表示这个点了，所以在欧式几何中就用三维坐标来表示这个点A（x2，y2，z2），但是就损失了它所在二维空间的信息，所以我们继续在原空间对它加以表示，由于用长度和方向不能唯一确定这个点了，而是要加上空间的弯曲这个量，所以再加一个方向来表示这个弯曲就可以了(长度，方向，弯曲方向) 用类似于向量的方式表示就是二维向量组也就是2*2二维矩阵，它包含两个向量(一个表示点A在纸平面空间的方向，另一个表示点A所在位置的弯曲).这个二维矩阵就是张量。 什么是阶张量的维数来被描述为阶.但是张量的阶和矩阵的阶并不是同一个概念.张量的阶（有时是关于如顺序或度数或者是n维）是张量维数的一个数量描述.比如，下面的张量（使用Python中list定义的）就是2阶. t = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 你可以认为一个二阶张量就是我们平常所说的矩阵，一阶张量可以认为是一个向量.对于一个二阶张量你可以用语句t[i, j]来访问其中的任何元素.而对于三阶张量你可以用’t[i, j, k]’来访问其中的任何元素.","path":"2021/04/02/张量Tensor/","date":"04-02","excerpt":"张量是什么一方面，日常直觉和物理研究告诉人们，同一物理量的值，在不同的坐标系往往是不同的，物理学家希望自己研究的对象，如果去除坐标系变换的影响，应该是同一个量，于是把这些符合某种坐标变换法则的物理量称为张量","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"卷积神经网络基础","text":"卷积神经网络（Convolutional Neural Networks, CNN）是一类包含卷积计算且具有深度结构的前馈神经网络（Feedforward Neural Networks），是深度学习（deep learning）的代表算法之一 [1-2] 。卷积神经网络具有表征学习（representation learning）能力，能够按其阶层结构对输入信息进行平移不变分类（shift-invariant classification），因此也被称为“平移不变人工神经网络（Shift-Invariant Artificial Neural Networks, SIANN） 全连接层​ 有许许多多的神经元共同连接的来的 神经元常见模型： BP算法包括信号的前向传播和误差的反向传播两个过程 CNN中独特的网络结构——卷积层 目的：进行图像特征提取 特性： 拥有局部感知机制 权值共享 引入非线性因素，使其具备解决非线性问题的能力 常用的激活函数有 sigmoid函数 f(x) = \\frac{1}{1+e^{-x}} sigmoid激活函数饱和时梯度值非常小，故网络层数比较深时易出现梯度消失 ReLU函数 f(x) = Max(0,x)ReLU激活函数缺点是反向传播过程中有一个非常大的梯度经过时，反向传播更新后可能导致权重分布中心小于零，导致该处的倒数始终为0，反向传播无法更新权重，即进入失活状态 在卷积操作过程中，矩阵经卷积操作的尺寸由以下几个因素决定 输入图片大小W*W 卷积核Filter大小 F * F 步长S padding的像素数p 则经卷积后矩阵尺寸大小计算公式为：$N= \\frac{W-F+2P}{S}+1$ 怎么理解这个等式？首先，考虑对图片横向的填充，有两个边所以加上2*padding。其次，考虑到卷积核kernel的右边到达图片的右边时候，此时占用了图片kernel_size个像素。因此，在一个方向上，知道起点和终点，还有步长，那么需要几步才能走完一个方向，那可想而知。其中每一步对应于下一个层的一个像素点（神经元）。 池化层 目的：对特征图进行稀疏处理，减少数据运算量 MaxPooling下采样层 AveragePooling下采样层 特点 没有训练参数 只改变特征矩阵的w和h，不改变channel 一般poolsize和stride相同 误差的计算 针对一个神经网络 softmax函数表达式为： o_i = \\frac{e^{y_i}}{\\sum_{i}e^{y_i}} 经过softmax处理后所有节点概率和为1 Corss Entropy Loss交叉熵损失 针对多分类问题（softmax输出） H = - \\sum_{i}o_i^{*}log(o_i) 针对二分类问题（sigmoid输出） H = - \\frac{1}{N}\\sum_{i=1}^N[o_i^{*}logo_i+(1-o_i^{*})log(1-o_i)] 误差的反向传播 权重的更新 优化器 目的：为了网络更快的收敛 SGD优化器 更新公式： W_{t+1} = W_{t} - \\alpha{g(W_{t})} α是学习率，$g(w_t)$为t时刻对参数$w_t$的损失梯度 缺点： 易受样本噪声影响 可能陷入局部最优解 SGD+Momentum优化器 公式： V_{t} = \\eta{V_{t-1}} + \\alpha{g(W_{t})} W_{t+1} = W_{t} - V_{t} pytorch Tensor的通道排序[batch, channel, height, width] 每一层卷积有多少channel数，以及一共有多少层卷积，这些暂时没有理论支撑，一般都是靠感觉去设置几组候选值，然后通过实验挑选出其中的最佳值。","path":"2021/04/02/卷积神经网络基础/","date":"04-02","excerpt":"卷积神经网络（Convolutional Neural Networks, CNN）是一类包含卷积计算且具有深度结构的前馈神经网络（Feedforward Neural Networks），是深度学习（deep learning）的代表算法之一 [1-2] 。卷积神经网络具有表征学习（representation learning）能力，能够按其阶层结构对输入信息进行平移不变分类（shift-invariant classification），因此也被称为“平移不变人工神经网络（Shift-Invariant Artificial Neural Networks, SIANN）","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"池化层","text":"​ 池化过程在一般卷积过程后。池化（pooling） 的本质，其实就是采样。Pooling 对于输入的 Feature Map，选择某种方式对其进行降维压缩，以加快运算速度。 种类目前主要有两种 最大法：MaxPooling 平均法：AvgPooling 形态 1D 用于一维数据 2D 一般用于二维图像数据 3D 带时间序列数据的图像数据 参数 pool_size 池化的大小 strides 步长 padding data_format 重点讲pool_size，对图像进行池化，选择2D的形态，则池化中的poolsize参数应该为(2, 2)，是一个包含两个元素的元组，若此时输入进去的图像为100 100的尺寸，则经过池化得到的是50 50的的图像尺寸，因为可以知道这里的pool_size也可以说是是缩小的比例因子 作用池化的作用： （1）保留主要特征的同时减少参数和计算量，防止过拟合。 （2）invariance(不变性)，这种不变性包括translation(平移)，rotation(旋转)，scale(尺度)。 Pooling 层是一个特征选择，信息过滤的过程。也就是说我们损失了一部分信息，这是一个和计算性能的一个妥协","path":"2021/04/02/池化层/","date":"04-02","excerpt":"​ 池化过程在一般卷积过程后。池化（pooling） 的本质，其实就是采样。Pooling 对于输入的 Feature Map，选择某种方式对其进行降维压缩，以加快运算速度。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"数值数据的表示方法","text":"计算机只能识别二进制数，计算机需要处理的数（无符号数，有符号数等）。数据可分为两大类：数值数据，非数值数据。前者数量的多少；后者字符汉字图像等。 原码表示法 [X]_原 = \\left\\{\\begin{aligned}\\begin{equation} X, \\qquad 2^n > X\\ge 0 \\\\ 2^n-X, 0\\ge X>-2^n \\end{equation}\\end{aligned} \\right.​其中n为小数点前的位数，小数时n=0 补码表示法模：一个字长为n+1位的纯整数的溢出量为$2^{n+1}$，即是以$2^{n+1}$模。一个纯小数的溢出量为2同余：两个整数A，B除于同一个整数M，所得余数相同，称A和B对模M同余只要确定了一个模，就可以找到一个与负数等价的正数来替代此负数，而这个正数可以用模加上负数本身求得，这样就可把减法运算用加法实现了 [X]_补 =\\left\\{\\begin{aligned}\\begin{equation} X, \\qquad\\quad 1 > X \\ge 0 \\\\ 2^{n+1} + X, 0 > X \\ge -1(mod2) \\end{equation}\\end{aligned}\\right.​小数n=0 补码快捷方式：数值部分按位取反，末尾加1，符号位不变 定点表示法小数点的位置固定为最高有效位之前，符号位之后，记为$X_s.X_1X_2…X_n$ 定点小数的小数点位置是隐含约定的，并不需要真正的占据一个二进制位 当$X_s = 0$ 由$.X_1X_2…X_n都为1时为最大正数$ 最大正数为：$X_{最大正数} = (1 - 2^{-n})$由$.X_1X_2…X_n都为0时为最小正数$ 最小正数为：$ X_{最小正数}=2^{-n}$当$X_s = 1$ 原码表示中由$.X_1X_2…X_n都为1时为最小负数$ 原码表示最小负数为：$X_{最小负数} = -(1-2^{-n})$补码表示中由$.X_1X_2…X_n$都为0时为最小负数 补码表示的最小负数为：$X_{最大负数} = -1$整数和上面同理在这里，为什么最大负数为-1？，在补码中，零具有唯一确定性，补码比原码少一个-0的表示，多一个-1的表示以及整数表示范围多了一个$-2^{n}$ 移码由于补码很难直接判断真值大小，因为如果一个负数和正数比较会出现$[+21]_{补}=010101$和$[-21]_{补}=101011$比较出现$010101$小于$101011$的结果，然而实际上真值是$+21$大于$-21$，此时我们可以将所有的数往正数方向偏移一定的量，使得负数为正，再来比较数值的就不会出错 定义$[X]_{移} = 2^n + X(2^n&gt;X\\ge -2^n)$ $[X]_{移} = [X]_{补} + 2^n$","path":"2021/04/02/数值数据的表示方法/","date":"04-02","excerpt":"计算机只能识别二进制数，计算机需要处理的数（无符号数，有符号数等）。数据可分为两大类：数值数据，非数值数据。前者数量的多少；后者字符汉字图像等。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"运算方法和运算器","slug":"运算方法和运算器","permalink":"http://example.com/tags/%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E5%99%A8/"}]},{"title":"数据校验码","text":"数据校验是为保证数据的完整性进行的一种验证操作。通常用一种指定的算法对原始数据计算出的一个校验值，接收方用同样的算法计算一次校验值，如果两次计算得到的检验值相同，则说明数据是完整的 1.什么是错误$1$变成$0$，$0$变成$1$ 2.什么样的编码具有检错纠错能力码距：任意两个码字之间最少变化的二进制位数 具有检错纠错能力的数据校验码的实现原理是：在编码中，除去合法的码字，再加进一些非法的码字，当某个合法的码字出现错误时，就变成非法码字 对于码距≥2的数据校验码，开始具有检错能力，码距越大，检、纠错能力就越强，而且检错能力总大于或等于纠错能力 3.如何发现错误奇偶校验码校验位的取值（0或1）将使得整个校验码中”1”的个数为奇数或偶数： 奇校验——使得整个校验码中”1”的个数为奇数 偶校验——使得整个校验码中”1”的个数为偶数 交叉奇偶校验：传送数据块时，不仅每个字节有一个奇偶校验做横向校验，而且全部字节的同一位也设置一个奇偶校验做纵向校验 4. 如何确定错误的位置海明校验码校验位K，信息位N，则$2^{K+1} \\ge N+K+1 $ (1)编码 一个字节由8位二进制位组成，此时N=8， K=5，故海明码总位数为N+K=13，表示为：$H_{13}\\ H_{12}…H_{2}\\ H_{1}$ 五个校验位$P_5~P_1$对应的海明码位为:$H_{13}、H_{8}、H_{4}、H_{2}、H_{1}$,除$P_5$外其余四位满足$P_i中i等于2^{i-1}$的关系，而$P_5$只能放在$H_{13}$ P_1校验的是$D_1、D_2、D_4、D_5、D_7$，对应的海明码为$H_1(1),H_5(4+1),H_7(4+2+1),H_9(8+1),H_{11}(8+2+1)$,化位二进制就会发现，都有一个$XXXXXXX1$的形式，也就是说$P_i$校验的是二进制中权值为i的位数值为1的那些位数$(D_{位数})$,P2,P3,P4,P5同理 则$P_1=D_1\\oplus D_2\\oplus D_4\\oplus D_5\\oplus D_7$，用同样的方法将其他$P_i$求出 (2)校验 将接收到的海明码按如下关系进行偶校验： 如右所示：$S_1=P_1\\oplus D_1\\oplus D_2\\oplus D_4\\oplus D_5\\oplus D_7$ ，即将$P_1$和对应的$D_i$进行异或算出结国 然后依次求出$S_2\\ S_3\\ S_4\\ S_5$ ① 如果$S_5 \\sim S_1为00000$时，表明无错 ② 如果$S_5 \\sim S_1$仅有一位不为$0$，表明是某一位校验位出错或三位海明码同时出错 ③ 如果$S_5 \\sim S_1 $有两位不为$0$，表明是两位海明码同时出错，但无法确定出错位置 ④ 如果$S_5 \\sim S_1$有三位不为$0$，表明是一位信息位出错或三位校验位同时出错，出错位置由$S_4 \\sim S_1 $四位编码指明","path":"2021/04/02/数据校验码/","date":"04-02","excerpt":"数据校验是为保证数据的完整性进行的一种验证操作。通常用一种指定的算法对原始数据计算出的一个校验值，接收方用同样的算法计算一次校验值，如果两次计算得到的检验值相同，则说明数据是完整的","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"运算方法和运算器","slug":"运算方法和运算器","permalink":"http://example.com/tags/%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E5%99%A8/"}]},{"title":"定点数的加减法","text":"数值运算的核心是指加、减、乘、除四则算术。由于计算机中的数有定点和浮点两种表示形式，因此相应有定点数的运算和浮点数的运算。本文将介绍计算机中定点数的加减法运算过程。 注意，理解本文的前提是要清楚知道顶点数的源码、反码和补码的含义，以及定点数在计算机中的表示形式。 变补：$[-Y]_{补}$被称为$[Y]_{补}$的机器负数，由$[Y]_{补}求[-Y]_{补}$的过程称为对[Y]补的变补 表示为：$[-Y]_{补} = [[Y]_{补}]_{变 补}$ 补码与变补的区别一个负数由原码转换为补码时，符号位是不变的，仅对数值求补，而变补则不论这个数的正值是正是负，一律连同符号位取反，末位加1 在补码的加减法中，若做加法则两数直接相加，若做减法，则将被减数与减数的机器负数相加，运算结果用补码表示 表示为$[X]_{补} - [Y]_{补} = [X]_{补} + [-Y]_{补} = [X]_{补} + [[Y]_{补}]_{变 补}$ 注意：如果问题给的是真值，最后答案要写出真值 溢出若X，Y异号，不会溢出 若X，Y同号，运算结果超出所能表示的范围是，溢出，大于最大正数称为正溢，小于最小负数称之为负溢 检测溢出 (1)单符号位： 当两个同号的数值进行加减操作后，所得到的结果的符号位与之不同时，则发生了溢出。 **缺点**：如果符号位的后一位在运算过后产生了进位，可能会影响检测溢出结果的正确性 (2)采用进位位 在考虑了进位对符号位的影响后，进行改进得到的 如果符号位产生进位而最高有效位没有进位时，发生负溢 如果符号位没有进位，而最高有效位发生进位时，发生正溢 (3)采用变形补码(双符号位补码) 双符号位的含义如下： $S_{S1}S_{S2}=00$,结果为正数，无溢出 $S_{S1}S_{S2}=01$,正溢 $S_{S1}S_{S2}=10$,负溢 $S_{S1}S_{S2}=11$,结果为负数，无溢出","path":"2021/04/02/定点数的加减法/","date":"04-02","excerpt":"数值运算的核心是指加、减、乘、除四则算术。由于计算机中的数有定点和浮点两种表示形式，因此相应有定点数的运算和浮点数的运算。本文将介绍计算机中定点数的加减法运算过程。 注意，理解本文的前提是要清楚知道顶点数的源码、反码和补码的含义，以及定点数在计算机中的表示形式。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"运算方法和运算器","slug":"运算方法和运算器","permalink":"http://example.com/tags/%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E5%99%A8/"}]},{"title":"2.5矩阵因式分解","text":"LU分解设A是mn矩阵，它可以行化简为阶梯形而不必行变换，则A可写成形式$A=LU$，L是m\\m下三角矩阵，主对角线全是1，U是A得一个m*n阶梯形矩阵，这样一个分解称为LU分解，矩阵L是可逆的，称为单位下三角矩阵 A = \\begin{bmatrix} 1 & 0 & 0 & 0 \\\\ * & 1 & 0 & 0 \\\\ * & * & 1 & 0 \\\\ * & * & * & 1 \\end{bmatrix} \\begin{bmatrix} ■ & * & * & * & * \\\\ 0 & ■ & * & * & * \\\\ 0 & 0 & 0 & ■ & * \\\\ 0 & 0 & 0 & 0 & 0 \\end{bmatrix} \\\\L\\qquad \\qquad \\qquad \\ \\ \\ \\ \\ ULU分解算法设A可以化位阶梯形U，化简得过程中仅用行倍加变换，即把一行得倍数加于它下面得另一行，这样存在单位下三角初等矩阵$E_1,……E_p$使得$E_p……E_1A = U$, 于是$A = (E_p……E_1)^{-1}U = LU$ 其中$L = (E_p……E_1)^{-1}$ 具体方法为： 先将A化为m*n的阶梯形矩阵 将A的主元列列出，如果构不成m*m矩阵的话补齐并化为为单位下三角矩阵即可 习题","path":"2021/04/02/2.5矩阵因式分解/","date":"04-02","excerpt":"","tags":[{"name":"矩阵代数","slug":"矩阵代数","permalink":"http://example.com/tags/%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"矩阵的逆和特性","text":"定义$A^{-1}A = I\\ 且\\ AA^{-1} = I$ 定理4设$A = \\begin{bmatrix} a &amp; b \\\\ c &amp; d\\end{bmatrix}$,若ad-bc=0，则A可逆且 $A^{-1} = \\frac{1}{ad-bc}\\begin{bmatrix} d & -b \\\\ -c & a \\end{bmatrix}$ 若ad-bc=0，则A不可逆 定理5若A是可逆的n*n矩阵，则对每一$R^{n}$中的b，方程$Ax = b$有唯一解$x = A^{-1}b$ 定理6 若A是可逆矩阵，则$(A^{-1})^{-1} = A$ 若A和B都是n*n可逆矩阵，则AB也可逆，且$(AB)^{-1} = B^{-1}A^{-1}$ 若A可逆，则$A^T$也可逆，且$(A^T)^{-1} = (A^{-1})^T$ 把单位矩阵进行一次初等行变换就得到初等矩阵 每个初等矩阵E是可逆的，E的逆是一个同类型的初等矩阵，它把E变回I 定理7n*n的矩阵A是可逆的，当且仅当A行等价于$I_n$ 求$A^{-1}$的算法把增广矩阵$\\begin{bmatrix} A &amp; I \\end{bmatrix}$进行行化简，若A行等价于I，则$\\begin{bmatrix} A &amp; I \\end{bmatrix}$等价于$\\begin{bmatrix}I &amp; A^{-1}\\end{bmatrix}$,否则A不可逆 不可逆矩阵有时称为奇异矩阵，而可逆矩阵有时也称为非奇异矩阵 可逆矩阵的特性定理8设A为n*n的矩阵，则下列命题是等价的，即对某一特定的A，他们同时为真或同时为假 A是可逆矩阵 A行等价于n*n的单位矩阵 A有n个主元位置 方程Ax=0仅有平凡解 A的各列线性无关 线性变化x-&gt;Ax是一对一的 对$R^n$中任意b，方程Ax=b至少有一个解 A的各列生成$R^n$ 线性变化x-&gt;Ax把$R^n$映上到$R^n$ 存在n*n矩阵C使CA=I 存在n*n矩阵D使AD=I $A^T$是可逆矩阵 可逆线性变化$T:R^n \\rightarrow R^n$是可逆的，若存在函数$S:R^n \\rightarrow R^n$使得 ​ 对所有$R^n$中的x，$S(T(x)) = x \\qquad (1)$ ​ 对所有$R^n$中的x，$T(S(x))=x \\qquad (2)$ 定理9设$T:R^n \\rightarrow R^n$为线性变化，A为T的标准矩阵，则T可逆当且仅当A是可逆矩阵，这时由$S(x)=A^{-1}x$定义得线性变化S满足(1),(2)的唯一函数，我们称S是T的逆 习题 若n*n矩阵A为可逆，则A的各列线性无关 解答： \\because 矩阵A是可逆的 \\\\ 则对于 Ax = 0 \\\\ \\because A^{-1}Ax = A^{-1}0 \\\\ \\therefore I_n x = 0 \\\\ \\therefore x = 0 \\\\ \\because Ax = 0 仅有平凡解x=0 \\\\ \\therefore A的各列线性无关 若n*n矩阵A为可逆，则它的各列生成$R^n$ 解答： \\because 矩阵A是可逆的 \\\\ \\therefore 对于Ax=b有唯一解x=A^{-1}b \\\\ \\therefore A的各列生成R^n 设A为n*n的矩阵，方程$Ax=b$对任意$R^n$中的b有解，证明A必可逆 解答： \\because Ax=b对任意R^n中的b有解 \\\\ \\therefore A在每一行都有一个主元位置 \\\\ \\therefore A行等价于I_n \\\\ \\therefore A可逆 设A是n*n的矩阵，方程Ax=0仅有平凡解，说明为什么A有n个主元列且A行等价于$I_n$，由定理7说明A必定可逆 解答: \\because Ax=0仅有平凡解 \\\\ \\therefore A中各列都是主元列 \\\\ \\because A是方阵 \\\\ \\therefore A的每个行都有主元 \\\\ \\therefore A行等价于I_n \\therefore A必定可逆","path":"2021/04/02/2.2矩阵的逆/","date":"04-02","excerpt":"","tags":[{"name":"矩阵代数","slug":"矩阵代数","permalink":"http://example.com/tags/%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"2.1矩阵运算习题","text":"习题相关 设$CA=I_n$证明方程$Ax=0$只有平凡解，解释为什么A的列数不能多余行数 解答： \\because Ax = 0 \\\\ \\therefore CAx = C0 = 0 \\\\ \\because CA = I_n \\\\ \\therefore I_n x = 0 \\\\ \\therefore x = 0 \\\\ \\therefore A的各列线性无关 \\\\ \\therefore A中列数小于行数 设$AD = I_n$证明对任意的$R^m$中的b，方程$Ax = b$有解，解释为什么A的行数不可以多余列数 解答： \\because AD = I_n \\\\ \\therefore ADb = I_nb = b \\\\ \\therefore ADb = b \\\\ 令Db=x \\\\ \\therefore Ax = b \\\\ \\therefore Ax = b有解，且解为x=Db \\\\ \\because Ax = b 有解 \\\\ \\therefore A在每一行都有主元位置 \\\\ \\therefore A的行数不可以多余列数 设A式m*m的矩阵，存在n*m矩阵C和D，使得$CA=I_n$和$AD=I_m$,证明m=n且C=D 解答： 由24、25题可知，m=n \\\\ \\because DAC = (DA)C = I_nC = C \\\\ \\because DAC = D(AC) = DI_n = D \\\\ \\therefore C = D \\\\ C = I_n C = (DA)C = D(AC) = D I_n = D","path":"2021/04/02/2.1矩阵运算/","date":"04-02","excerpt":"","tags":[{"name":"矩阵代数","slug":"矩阵代数","permalink":"http://example.com/tags/%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"信道极限容量","text":"奈氏准则在假定的理想条件下，为了避免码间串扰，码元传输速率是有上限的 理想低通信道的最高码元传输速率：2W Baud = 2W 码元/秒 理想带通信道的最高码元传输速率：W Baud = W 码元/秒 W：信道带宽（单位为Hz） Baud：波特，即码元/秒 实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的上限数值 码元传输速率又称为波特率，调制速度，波形速率或符号速率，它与比特率有一定关系 当1个码元携带1比特信息量时，波特率(码元/秒)与比特率(比特/秒)在数值上相等 当1个码元携带n比特信息量时，波特率转换为比特率时，数值要乘于n 香农公式公式：$c = W log_2(1 + \\frac{S}{N})$ 其中W为信道带宽，S为信道所传信号的平均功率，N为信道的高斯噪声功率 $\\frac{S}{N}$是信噪比（dB）= $10log_{10}(\\frac{S}{N})(dB)$ 在实际信道上能够达到的信息传输速率要比要公式的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰、信号在传输中的衰减和失真等，这些因素未被考虑到香农公式 相关习题","path":"2021/04/02/信道极限容量/","date":"04-02","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"第三章部分习题","text":"利用模拟通信信道传输数字信号的方法称为( ) 解析：频带传输 基带传输：在数据通信中，由计算机或终端等数字设备直接发出的信号是二进制数字信号 频带传输：远距离通信信道多为模拟信道，基带信号与频带信号的转换是由调制解调技术完成的 在网络中，把语音与计算机产生的数字、文字、图形与图像同时传输，必须先把语音信号数字化，下列可以把语音信号数字化的技术是( ) 解析：脉冲编码调制 PCM 以下属于数据链路层的设备是（） 解析： 交换机 网桥 目前常用的网络连接器主要有、、____和网关。 解析： 中继器 网桥 路由器 网关 局域网中常用的拓扑结构主要有星型、____、总线型三种。 解析：环型 企业网络能被外部客户访问的区域是 解析：DMZ区域 波特率等于( )。 A每秒传输的比特 B每秒可能发生的信号变化次数 C每秒传输的周期数 D每秒传输的字节数 解析：每秒可能发生的信号变化次数 典型企业网络包含（）区域 解析： 数据中心 边缘区域 DMZ 【单选题】 下面的说法哪一种是正确的（）。 A、路由器适合大规模异构网络互连 B、MAC地址适合大规模网络寻址 C、三层交换机适合大规模异构网络互连 D、BGP适合自治系统内的路由选择 解析：A 下面的说法哪一个是正确的？ A、路由器具有路由选择功能，交换机没有路由选择功能 B、三层交换机具有路由选择功能，二层交换机没有路由选择功能 C、三层交换机适合异构网络，二层交换机不适合异构网络 D、路由器适合异构网络，交换机不适合异构网络 解析：D","path":"2021/04/02/习题/","date":"04-02","excerpt":"","tags":[{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"},{"name":"习题","slug":"习题","permalink":"http://example.com/tags/%E4%B9%A0%E9%A2%98/"}]},{"title":"传输媒介","text":"传输媒体可分为两大类： 导引型传输媒体 双绞线:成本低 三类双绞线 五类双绞线 同轴电缆：有线电视线 光纤：带宽大 优点: 带宽高 衰减小 安全 维护 缺点： 需要光电转化 非导引型传输媒体","path":"2021/04/02/传输媒介/","date":"04-02","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"传输方式","text":"数据传输方式（data transmission mode），是数据在信道上传送所采取的方式。若按数据传输的顺序可以分为并行传输和串行传输；若按数据传输的同步方式可分为同步传输和异步传输；若按数据传输的流向和时间关系可以分为单工、半双工和全双工数据传输 串行传输 发送端和接收端只需要一条传输线路即可 并行传输 成本高 发送速度使串行传输的n倍 发送端和接收端间需要n条传输线路 同步传输 数据块以稳定的比特流传输 字节之间没有间隔（同步） 由于不同设备的时钟频率存在差异，在传输大量数据的过程中，所产生的判别时刻的累计误差会导致接收端对比特信号的判别错位，实现收发双方时钟同步的方法主要有两种 外同步：在收发双方之间添加一条单独的时钟信号线 内同步：发送端将时钟同步信号编码到发送数据中一起传输 异步传输 以字节为独立的传输单位 字节之间的时间间隔不是固定的（异步） 接收端仅在每个字节的起始处对字节内的比特实现同步，为此要在每个字节的前后加上起始位和结束位 字节中的每个比特仍要同步 单向通信 双向交替通信 双向同时通信 **数据在传输线路上的传输是串行传输，计算机内部常采用并行传输**","path":"2021/04/02/传输方式/","date":"04-02","excerpt":"数据传输方式（data transmission mode），是数据在信道上传送所采取的方式。若按数据传输的顺序可以分为并行传输和串行传输；若按数据传输的同步方式可分为同步传输和异步传输；若按数据传输的流向和时间关系可以分为单工、半双工和全双工数据传输","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"物理层","text":"物理层（或称物理层，Physical Layer）是计算机网络OSI模型中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的数据可在各种物理媒体上传输。局域网与广域网皆属第1、2层 2.1物理层的基本概念用于物理层的协议被称为物理层规程 物理层的主要任务描述为确定与传输媒体的接口有关的一些特性： 机械特性 电气特性 功能特性 过程特性 数据在计算机内部多采用并行传输方式，但数据在通信线路上的传输方式一般都是串行传输 2.2 数据通信基础知识 2.2.1数据通信系统的模型 一个数据通信系统可划分为三大部分： 源系统（发送端、发送方），一般包含以下两部分： 源点：源点设备产生要传输的数据 发送器：通常源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输 传输系统（传输网络） 目的系统（接收端、接收方），一般包含以下两部分： 接收器：接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息 终点：终点设备从接收器获取传送来的数字比特流，然后把信息输出 一些术语： ​ 通信的目的是传送消息，数据是运送消息的实体，根据RFC 4949的定义，数据是使用特定方式表示的信息，信号是数据的电气或电磁表现。 根据信号中代表消息的参数的取值不同，信号可分为两大类： 模拟信号，或连续信号 数字信号，或离散信号 2.2.2 有关信道的几个基本概念信道和电路并不同，信道一般都是用来表示向某一个方向传送消息的媒体。因此通信电路往往包含一个发送信道和一条接受信道 从通信的双方交互的方式来看，可以有以下三种基本方式： 单向通信：只能有一个方向的通信而没有反方向的交互，无线电广播或有线电广播以及电视广播就属于这种类型 双向交替通信：通信双方都可以发送消息，但不能双方同时发送 双向同时通信：通信双方可以同时发送和接收信息 **来自信源的信号常称为基带信号** 基带信号往往包含较多的低频成分，甚至直流成分，而许多信道并不能传输这种低频分量或直流分量，为了解决这一问题，就必须对基带信号进行**调制** 调制可分为两大类 基带调制：仅仅对基带信号的波形进行变换，变换后仍是基带信号，也称这一过程为编码 使用载波进行调制：把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，经过载波调制后的信号称为带通信号，而使用载波的调制称为带通调制 常用编码方式 不归零制：正电平为1，负电平为0 归零制：正脉冲为1，负脉冲为0 曼切斯特编码：位周期中心的向上跳代表0，位周期中心的向下跳代表1。也可以反过来定义 差分曼切斯特编码：在每一位的中心始终有跳变，位开始边界的跳变代表0，位开始边界没有跳变代表1 基本的带通调制方法 调幅（AM）：载波的振幅随基带数字信号的变化而变化 调频（FM）：载波的频率岁基带数字信号而变化 调相（PM）：载波的初始相位岁基带数字信号而变化 为了达到更高的信号传输速率，必须采用技术上更为复杂的多元制的振幅相位混合调制方法。例如正交振幅调制 2.2.3 信道的极限容量数字通信的优点：虽然信号在信道上传输会不可避免的失真，但在接收端只要从失真的波形识别出原来的信号，那么这种失真对通信质量就没有影响 限制码元在信道上的传输速率大的因素有以下两个： 信道能够通过的频率范围：具体的信道所能通过的频率范围是有限的，信号中的高频分量往往不能通过信道 信噪比：噪声存在于所有的电子设备和通信信道中，噪声会使接收端对码元的判决（识别）产生错误 需要知道的是：在任何信道中，码元传输的速率是由上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使得接收端对码元的识别成为不可能 所谓的信噪比就是信号的平均功率和噪声的平均功率之比，记为$\\frac{S}{N}$,并用分贝（dB）作为度量单位 信噪比（dB）= $10log_{10}(\\frac{S}{N})(dB)$ 信道的极限信息由香农公式传输速率$C = W log_{2}(1+\\frac{S}{N})(bit/s)$ 其中W为信道带宽，S为信道所传信号的平均功率，N为信道的高斯噪声功率 **香农公式指出，信道的带宽或信道中的信噪比越大，信道的极限传输速率就越高**","path":"2021/04/02/物理层/","date":"04-02","excerpt":"物理层（或称物理层，Physical Layer）是计算机网络OSI模型中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的数据可在各种物理媒体上传输。局域网与广域网皆属第1、2层","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"网络设备","text":"网络设备及部件是连接到网络中的物理实体。网络设备的种类繁多，且与日俱增。基本的网络设备有：计算机（无论其为个人电脑或服务器）、集线器、交换机、网桥、路由器、网关、网络接口卡（NIC）、无线接入点（WAP）、打印机和调制解调器、光纤收发器、光缆等 1.集线器 目的：解决终端主机的物理连接问题，将在其内部所有的网络设备联通 不过滤任何数据，也不知道数据发送到什么地方 终端集中点，通过集线器形成星型拓扑 物理层设备 对信号整型放大 共享一个信道，性能比较差 会将信息传到除自己以外的所有主机，哪怕只想和其中的一个通信，造成浪费带宽 因为不能读取IP地址，所以不能在外部网络（例如互联网）交换数据 2.交换器 数据链路层设备，能够解析数据帧结构 使用MAC地址，能够根据MAC地址进行主机的定位寻址，所以信息只会发送到目的主机减少带宽的浪费和集线器不同 独享信道，所以交换机的性能远远超过集线器 不能读取IP地址 3.路由器 实现网络连接进行数据交换 网络层设备 可以读取IP地址，所以可以将数据包发送到外部网络 输入输出端口安装了三种协议软件，分别是物理层，数据链路层，网络层 总之，集线器和交换机构建网络，路由器将网络与网络连接起来4.防火墙 防火墙是一个系统，用来防止未经授权的网络传输侵入私有的网络系统，是由过滤传输的数据来达到这个效果 目的：要在公共网络和私人的网络间建立一道流量管控机制 防火墙由网络管理员管理和制定规则 防火墙可以针对网域名，协议，软件，IP地址，端口和关键词来制定规则 防火墙有多种形式，一种是主机式防火墙，一种是软件式防火墙，网络式防火墙 5.无线接入点（WiFi） 延申网络覆盖范围 移动设备接入点","path":"2021/04/02/网络设备/","date":"04-02","excerpt":"网络设备及部件是连接到网络中的物理实体。网络设备的种类繁多，且与日俱增。基本的网络设备有：计算机（无论其为个人电脑或服务器）、集线器、交换机、网桥、路由器、网关、网络接口卡（NIC）、无线接入点（WAP）、打印机和调制解调器、光纤收发器、光缆等","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"编码与调制","text":"无线收发模块用于传感器节点间的数据通信,解决无线通信中载波频段选择、信号调制方式、数据传输速率,编码方式等,并通过天线进行节点间、节点与基站间数据的收发。与一般的网络通信类似,传感器网络的数据通信协议也包括了物理层、链路层、网络层和应用层,与节点硬件平台有关的主要是物理层和链路层 基带信号分为 数字基带信号 模拟基带信号 信道可分为： 数字信道 模拟信道 对于数字信号​ 在不改变信号性质的前提下，仅对数字基带信号的波形进行变换，成为编码，编码后的信号仍为数字信号 把数字信号的频率范围搬移到较高的频段，并转化为模拟信号，称为调制 ​ 对于模拟信号同上 码元在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形 传输媒体和信道不能划等号一个传输媒体只有一条发送信道和一条接收信道，而信道却可以通过复用技术拥有多条发送信道和接收信道 常用编码 不归零编码 需要额外一条传输线来传输时钟信号，使发送方和接收方同步 由于存在同步问题，计算机网络的数据传输不采用这种编码 归零编码 每个码元传输结束后信号都要归零，所以接收方只要信号归零后进行采样即可，不需要单独的时钟信号 归零编码相当于把时钟信号用归零方式编码在数据内，这称为自同步信号 归零编码中大部分的数据带宽用来传输归零而浪费掉了，编码效率低 曼切斯特编码 码元中间时刻的跳变即表示时钟，又表示数据 传统以太网用的这种编码 差分曼切斯特编码 跳变仅表示时钟 码元开始处电平是否发生变化表示数据 10BaseT以太网使用的曼切斯特编码基本调制方法 使用基本调制方法，一个码元只能包含一个比特信息，如何使用一个码元包含更多的比特呢？​ 因为频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个 ​ 通常情况下，相位和振幅可以结合来一起调制，称为正交振幅调制QAM","path":"2021/04/02/编码与调制/","date":"04-02","excerpt":"无线收发模块用于传感器节点间的数据通信,解决无线通信中载波频段选择、信号调制方式、数据传输速率,编码方式等,并通过天线进行节点间、节点与基站间数据的收发。与一般的网络通信类似,传感器网络的数据通信协议也包括了物理层、链路层、网络层和应用层,与节点硬件平台有关的主要是物理层和链路层","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"}]},{"title":"网络协议与网络体系结构","text":"网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。它广泛采用的是国际标准化组织（ISO）在1979年提出的开放系统互连（OSI-Open System Interconnection)的参考模型 OSI失败的原因 OSI的专家们缺乏实际经验，他们在完成OSI标准时缺乏商业动力 OSI的协议实现起来过于复杂，而且运行效率很低 OSI标准的制定周期太长，因而使得OSI标准生产的设备无法及时进入市场 OSI的层次划分不太合理，有些功能在多个层次中重复出现 网络协议三要素 语法：数据与控制信息的结构或格式 语义：需要发出何种控制信息，完成何种动作以及做出何种响应 同步：即事件实现顺序的详细说明 分层的好处 各层之间是独立的：某一层不需要知道其他层如何实现，仅仅需要知道通过层间接口所提供的服务 灵活性好：只要层间接口关系不变，则其他层均不受影响 结构上可分割开：各层都可以采用最合适的技术实现 易于实现和维护：使得实现和调试一个庞大又复杂的系统变得易于处理，因为整个系统被分解为若干个相对独立的子系统了 能促进标准化工作：因为每一层的功能及其所提供的服务都已经有了精确的说明 通常各层所要完成的功能主要有以下一些 差错控制：使相应层次对等方的通信更加可靠 流量控制：发送端的发送速率必须使接收端来得及接收 分段和重装：发送端将要发送的数据块划分为更小的单位，在接收端复原 复用和分用：发送端几个高层会话复用一条低层的连接，在接收端再进行分用 连接建立和释放：交换数据前先建立一条逻辑连接，数据传输结束后释放连接 分层也有缺点，有些功能会在不同的层次中重复出现，因而产生额外的开销 体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件","path":"2021/04/02/网络协议与网络体系结构/","date":"04-02","excerpt":"网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。它广泛采用的是国际标准化组织（ISO）在1979年提出的开放系统互连（OSI-Open System Interconnection)的参考模型","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络体系架构与网络协议","slug":"网络体系架构与网络协议","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"参考模型","text":"网络术语中的参考模型指的是OSI参考模型，由ISO（国际标准化组织）制定的一套普遍适用的规范集合，以使得全球范围的计算机平台可进行开放式通信。 ISO创建了一个有助于开发和理解计算机的通信模型，即开放系统互联OSI参考模型。OSI参考模型将网络结构划分为七层：即物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 模型的基本原则 应该在需要一个不同抽象体的地方创建一层 每一层都应该执行一个明确定义的功能 每一层功能的选择应该向定义国际标准化协议的目的看齐 层与层边界的选择应该使跨越接口的信息流最小 层数要足够多，保证不同的功能不会混杂在同一层中，同时层数不能太多，以免体系结构过于庞大 物理层在物理层上所传数据的单位是比特 数据链路层在两个相邻结点之间传输数据时，数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送帧，每一帧包括数据和必要的控制信息（同步信息，地址信息，差错控制等…） 数据链路层不仅要检错，还要纠错 网络层网络层负责为分组交换网上的不同主机提供通信服务网络层将运输层产生的报文段或数据报封装成分组或包进行传送网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机 运输层负责向两台主机中进程间的通信提供通用的数据传输服务由于一台主机可以同时运行多个进程，因而运输层有复用和分用的功能 运输层主要使用以下协议 传输控制协议TCP——提供面向连接，可靠的数据传输服务，其数据传输的单位是报文段 用户数据报协议UDP——提供无连接，尽最大努力的数据传输服务，其数据传输单位是用户数据报 应用层是体系结构的最高层任务是通过应用进程间的交互来完成特定网络应用应用层协议定义的是应用进程间通信和交互的规则我们把应用层交互的数据单元称为报文","path":"2021/04/02/参考模型/","date":"04-02","excerpt":"网络术语中的参考模型指的是OSI参考模型，由ISO（国际标准化组织）制定的一套普遍适用的规范集合，以使得全球范围的计算机平台可进行开放式通信。 ISO创建了一个有助于开发和理解计算机的通信模型，即开放系统互联OSI参考模型。OSI参考模型将网络结构划分为七层：即物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"网络体系架构与网络协议","slug":"网络体系架构与网络协议","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2021/04/02/hello-world/","date":"04-02","excerpt":"","tags":[]}],"categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"运算方法和运算器","slug":"运算方法和运算器","permalink":"http://example.com/tags/%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E5%99%A8/"},{"name":"行列式","slug":"行列式","permalink":"http://example.com/tags/%E8%A1%8C%E5%88%97%E5%BC%8F/"},{"name":"矩阵代数","slug":"矩阵代数","permalink":"http://example.com/tags/%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"},{"name":"IP网络协议","slug":"IP网络协议","permalink":"http://example.com/tags/IP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"},{"name":"习题","slug":"习题","permalink":"http://example.com/tags/%E4%B9%A0%E9%A2%98/"},{"name":"网络体系架构与网络协议","slug":"网络体系架构与网络协议","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]}