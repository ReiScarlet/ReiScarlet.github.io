{"meta":{"title":"Reimilia","subtitle":"","description":"","author":"Reimilia","url":"https://reiscarlet.github.io","root":"/"},"pages":[{"title":"分类","text":"","path":"categories/index.html","date":"04-02","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"12-12","excerpt":""},{"title":"404","text":"","path":"404/index.html","date":"05-14","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"05-17","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"05-14","excerpt":""}],"posts":[{"title":"经典局域网的交换技术","text":"媒体接入的基本概念媒体接入控制MAC（Medium Access Control）：协调多个发送核接收站点对一个共享传输媒体的占用 媒体接入控制： 静态划分信道：预先固定好信道，非常不灵活，对于突发性传输信道利用率很低，通常在无线网络的物理层使用，而不是在数据链路层中使用，分为频分多址，时分多址，码分多址 动态接入信道 受控接入：已被淘汰 集中控制 分散控制 随机接入：所有站点通过竞争随机的在信道发送数据，如果恰巧有两个或更多的站点在同一时刻发送数据，则信号在共享媒体上就要发生碰撞，即发生了冲突使得这些站点的发送都失败。因此，这类协议要解决关键问题：如何避免冲突，以及冲突后如何尽快的恢复通信 现在，点对点链路和链路层交换式局域网在有线领域已完全取代了共享式局域网，但由于无线通信的广播天性，无线局域网仍然使用共享媒体技术 CSMA/CD协议载波监听多址接入/碰撞检测 CSMA/CD（Carrier Sense Multiple Access/Collision Detection） 多址接入MA：多个站连接在一条总线，竞争使用总线 载波监听CS：每个站在发送帧之前先检测一下总线上是否有其他站点在发送帧，即“先听后说”；若检测到总线空闲96比特时间，则发送这个帧 碰撞检测CD：每一个正在发送帧在站边发送边检测碰撞，即是“边说边听”；一旦发现总线上发生碰撞立刻停止发送，一段时间后再次发送 CSMA/CD协议不适用于无线网络。对于无线网络，可以使用CSMA/CA协议 CSMA/CD协议——争用期 主机最多经过2α就检测到碰撞（A-&gt;D-&gt;A），所以以太网的端到端往返传播时延2α为争用期或碰撞窗口 显然，在以太网中发生帧的主机越多，端到端的传播时延越大，发生碰撞的概率就越大。因此，共享式以太网不能连接太多的主机，使用的总线也不能太长 经过争用期还没有检测到碰撞，才能肯定这次发送不会发生碰撞 CSMA/CD协议——最小帧长产生问题：如果主机A发送了一个很小的帧，发送完后主机A就不再检测碰撞了。然后主机C发送帧，由于主机A发送的帧很小，所以主机C因为判断总线空闲96比特时间，所以发送帧。但是总线实际并不空闲。这样子就必然发生碰撞。这样接收方就会收到A发送的并遭遇碰撞的帧，所以接收方会丢弃有差错的帧。但是A不知道发送的帧遭遇了碰撞，所以不会重发该帧。 所以以太网的帧长不能太短 以太网规定最小帧长为64字节，即是512比特（512比特即为争用期）；如果发送的帧没有64比特，就必须加入填充字节。 如果争用期内检测到碰撞，就立即中止发送，此时发送的数据一定小于64字节。因为凡是小于64字节的帧都是由于碰撞而异常终止的无效帧** 最小帧长=争用期*数据传输速率 CSMA/CD协议——最大帧长产生问题：如果主机A给D发送一个很长的帧。那么发送过程中有可能该帧长期占据了总线的资源，导致其他主机检测到总线空闲没有96比特时间而长时间无法发送帧。同时接收方可能因为帧过于长导致缓冲区满了而溢出。 所以以太网V2的MAC帧最大长度设为1518字节，其中46~1500字节为数据载荷部分 插入VLAN标记后的802.1Q帧设最大长度为1522字节。其中数据载荷部分42~1500字节 CSMA/CD协议——截断二进制指数退避算法退避时间=基本退避时间*随机数r 其中基本退避时间为争用期，随机数r从离10散的整数集合{0，1，….，$（2^k-1）$}中随机选出一个数.k=Min{重传次数，10} 若连续多次发生碰撞，就表明有较多的主机参与竞争信道。但使用上述退避算法可使重传需要推迟的平均时间随重传次数而增大，因为减少发生碰撞的概率，有利于整个系统的稳定 当重传次数16仍不成功，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则丢弃该帧，并向高层报告 CSMA/CD协议——信道利用率理想情况下： 各个主机发送帧不会发生碰撞 总线一旦空闲就有某个主机立即发送帧 发送一帧占用总线的时间为$T_0 + α$，而帧本身的发送时间为$T_0$，α是传送时延 极限的信道利用率$S_{max}=\\frac{T_0}{T_0+\\alpha} = \\frac{1}{1+\\frac{\\alpha}{T_0}}$ 设β=α/T_0。则β应该尽量小，以提高信道利用率；以太网端到端的距离应该收到限制，减少α的值；以太网帧的长度应该尽量长些； CSMA/CD协议——帧发送过程 CSMA/CD协议——帧接收流程","path":"2021/05/22/媒体接入的基本概念/","date":"05-22","excerpt":"","tags":[]},{"title":"VPN，NAT","text":"VPNVirtual Private Network，虚拟专用网 定义：利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网称为虚拟专用网 专用（私有）地址： 10.0.0.0 ~ 10.255.255.255(10/8地址块) 172.16.0.0 ~ 172.31.255.255 (172.16/12地址块) 192.168.0.0 ~ 192.168.255.255(192.168/16地址块) 虚拟专用网的各主机所分配的地址应该是本机构可自由分配的专用地址，而不是需要申请的、在因特网上使用的公有地址 私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信，私有地址只能用作本地地址而不能用作全球地址 对于因特网上的路由器，目的地址是私有地址的IP数据报一律不进行转发 VPN要保证数据的安全性，会将原始的内部数据进行加密，然后再将其封装成为在因特网上发送的外部数据报 VPN的类型 同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为内联网VPN 有时同一机构的VPN需要有某些外部机构参加进来，这样的VPN称为外联网VPN 在外地工作的员工需要访问公司内部的专用网络时，只要在任何地址接入因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源，这种VPN称为远程接入VPN NATNetwork Address Translation，网络地址转换 NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源 当一个专用网中的主机向一个全球IP地址的主机发送数据报，数据报发送到NAT路由器，源地址一开始记录的是该主机的私有地址，目的地址字段的值为另一台主机的全球IP地址。 NAT从自己的全球IP地址池中为该主机分配一个临时的全球IP地址，此时源地址字段的值为临时全球IP地址，然后NAT将私有地址与全球地址的关系记录在转换表中，然后就可以转发改数据报了 如果是一个全球IP地址的主机向专用网的私有地址的主机发送数据报，在NAT的转换表中查找目的地址中的全球IP地址对应在专用网上的私有地址，然后将目的地址改写成该私有地址再进行数据报的转发 该转换方式存在一个问题：如果NAT路由器具有N个全球IP地址，那么至多只能有N个内网主机能够同时和因特网上主机通信 解决办法：由于绝大多数网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换 这样，用一个全球IP地址就可以使用多个拥有本地地址的主机和因特网上的主机进行通信，这种将端口号和IP地址一起进行 转换的技术叫做网络地址与端口号转换NAPT（Network Address and Port Translation） 注意：不能由外网主机首先跟内网主机进行通信，因为此时NAT转换表中还没有映射关系 由于NAT对外网屏蔽了内网主机的网络地址，能为内网的主机提供一定的安全保护","path":"2021/05/21/VPN和NAT/","date":"05-21","excerpt":"","tags":[]},{"title":"信道极限容量","text":"奈氏准则在假定的理想条件下，为了避免码间串扰，码元传输速率是有上限的 理想低通信道的最高码元传输速率：2W Baud = 2W 码元/秒 理想带通信道的最高码元传输速率：W Baud = W 码元/秒 W：信道带宽（单位为Hz） Baud：波特，即码元/秒 实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的上限数值 码元传输速率又称为波特率，调制速度，波形速率或符号速率，它与比特率有一定关系 当1个码元携带1比特信息量时，波特率(码元/秒)与比特率(比特/秒)在数值上相等 当1个码元携带n比特信息量时，波特率转换为比特率时，数值要乘于n 香农公式公式：$c = W log_2(1 + \\frac{S}{N})$ 其中W为信道带宽，S为信道所传信号的平均功率，N为信道的高斯噪声功率 $\\frac{S}{N}$是信噪比（dB）= $10log_{10}(\\frac{S}{N})(dB)$ 在实际信道上能够达到的信息传输速率要比要公式的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰、信号在传输中的衰减和失真等，这些因素未被考虑到香农公式 相关习题","path":"2021/05/21/信道极限容量/","date":"05-21","excerpt":"","tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"传输方式与传输媒介","text":"[TOC] 传输方式数据传输方式（data transmission mode），是数据在信道上传送所采取的方式。若按数据传输的顺序可以分为并行传输和串行传输；若按数据传输的同步方式可分为同步传输和异步传输；若按数据传输的流向和时间关系可以分为单工、半双工和全双工数据传输 串行传输 发送端和接收端只需要一条传输线路即可 并行传输 成本高 发送速度使串行传输的n倍 发送端和接收端间需要n条传输线路 同步传输 数据块以稳定的比特流传输 字节之间没有间隔（同步） 由于不同设备的时钟频率存在差异，在传输大量数据的过程中，所产生的判别时刻的累计误差会导致接收端对比特信号的判别错位，实现收发双方时钟同步的方法主要有两种 外同步：在收发双方之间添加一条单独的时钟信号线 内同步：发送端将时钟同步信号编码到发送数据中一起传输 异步传输 以字节为独立的传输单位 字节之间的时间间隔不是固定的（异步） 接收端仅在每个字节的起始处对字节内的比特实现同步，为此要在每个字节的前后加上起始位和结束位 字节中的每个比特仍要同步 单向通信 双向交替通信 双向同时通信 **数据在传输线路上的传输是串行传输，计算机内部常采用并行传输** 传输媒介 导引型传输媒体 双绞线:成本低 三类双绞线 五类双绞线 同轴电缆：有线电视线 光纤：带宽大 优点: 带宽高 衰减小 安全 维护 缺点： 需要光电转化 非导引型传输媒体","path":"2021/05/21/传输方式/","date":"05-21","excerpt":"","tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"第三章部分习题","text":"利用模拟通信信道传输数字信号的方法称为( ) 解析：频带传输 基带传输：在数据通信中，由计算机或终端等数字设备直接发出的信号是二进制数字信号 频带传输：远距离通信信道多为模拟信道，基带信号与频带信号的转换是由调制解调技术完成的 在网络中，把语音与计算机产生的数字、文字、图形与图像同时传输，必须先把语音信号数字化，下列可以把语音信号数字化的技术是( ) 解析：脉冲编码调制 PCM 以下属于数据链路层的设备是（） 解析： 交换机 网桥 目前常用的网络连接器主要有、、____和网关。 解析： 中继器 网桥 路由器 网关 局域网中常用的拓扑结构主要有星型、____、总线型三种。 解析：环型 企业网络能被外部客户访问的区域是 解析：DMZ区域 波特率等于( )。 A每秒传输的比特 B每秒可能发生的信号变化次数 C每秒传输的周期数 D每秒传输的字节数 解析：每秒可能发生的信号变化次数 典型企业网络包含（）区域 解析： 数据中心 边缘区域 DMZ 【单选题】 下面的说法哪一种是正确的（）。 A、路由器适合大规模异构网络互连 B、MAC地址适合大规模网络寻址 C、三层交换机适合大规模异构网络互连 D、BGP适合自治系统内的路由选择 解析：A 下面的说法哪一个是正确的？ A、路由器具有路由选择功能，交换机没有路由选择功能 B、三层交换机具有路由选择功能，二层交换机没有路由选择功能 C、三层交换机适合异构网络，二层交换机不适合异构网络 D、路由器适合异构网络，交换机不适合异构网络 解析：D","path":"2021/05/21/习题/","date":"05-21","excerpt":"","tags":[{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"},{"name":"习题","slug":"习题","permalink":"https://reiscarlet.github.io/tags/%E4%B9%A0%E9%A2%98/"}]},{"title":"参考模型","text":"网络术语中的参考模型指的是OSI参考模型，由ISO（国际标准化组织）制定的一套普遍适用的规范集合，以使得全球范围的计算机平台可进行开放式通信。 ISO创建了一个有助于开发和理解计算机的通信模型，即开放系统互联OSI参考模型。OSI参考模型将网络结构划分为七层：即物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 模型的基本原则 应该在需要一个不同抽象体的地方创建一层 每一层都应该执行一个明确定义的功能 每一层功能的选择应该向定义国际标准化协议的目的看齐 层与层边界的选择应该使跨越接口的信息流最小 层数要足够多，保证不同的功能不会混杂在同一层中，同时层数不能太多，以免体系结构过于庞大 物理层在物理层上所传数据的单位是比特 数据链路层在两个相邻结点之间传输数据时，数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送帧，每一帧包括数据和必要的控制信息（同步信息，地址信息，差错控制等…） 数据链路层不仅要检错，还要纠错 网络层网络层负责为分组交换网上的不同主机提供通信服务网络层将运输层产生的报文段或数据报封装成分组或包进行传送网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机 运输层负责向两台主机中进程间的通信提供通用的数据传输服务由于一台主机可以同时运行多个进程，因而运输层有复用和分用的功能 运输层主要使用以下协议 传输控制协议TCP——提供面向连接，可靠的数据传输服务，其数据传输的单位是报文段 用户数据报协议UDP——提供无连接，尽最大努力的数据传输服务，其数据传输单位是用户数据报 应用层是体系结构的最高层任务是通过应用进程间的交互来完成特定网络应用应用层协议定义的是应用进程间通信和交互的规则我们把应用层交互的数据单元称为报文","path":"2021/05/21/参考模型/","date":"05-21","excerpt":"网络术语中的参考模型指的是OSI参考模型，由ISO（国际标准化组织）制定的一套普遍适用的规范集合，以使得全球范围的计算机平台可进行开放式通信。 ISO创建了一个有助于开发和理解计算机的通信模型，即开放系统互联OSI参考模型。OSI参考模型将网络结构划分为七层：即物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。","tags":[{"name":"计算机网络概述","slug":"计算机网络概述","permalink":"https://reiscarlet.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"}]},{"title":"定点数的加减法","text":"数值运算的核心是指加、减、乘、除四则算术。由于计算机中的数有定点和浮点两种表示形式，因此相应有定点数的运算和浮点数的运算。本文将介绍计算机中定点数的加减法运算过程。 注意，理解本文的前提是要清楚知道顶点数的源码、反码和补码的含义，以及定点数在计算机中的表示形式。 变补：$[-Y]_{补}$被称为$[Y]_{补}$的机器负数，由$[Y]_{补}求[-Y]_{补}$的过程称为对[Y]补的变补 表示为：$[-Y]_{补} = [[Y]_{补}]_{变 补}$ 补码与变补的区别一个负数由原码转换为补码时，符号位是不变的，仅对数值求补，而变补则不论这个数的正值是正是负，一律连同符号位取反，末位加1 在补码的加减法中，若做加法则两数直接相加，若做减法，则将被减数与减数的机器负数相加，运算结果用补码表示 表示为$[X]_{补} - [Y]_{补} = [X]_{补} + [-Y]_{补} = [X]_{补} + [[Y]_{补}]_{变 补}$ 注意：如果问题给的是真值，最后答案要写出真值 溢出若X，Y异号，不会溢出 若X，Y同号，运算结果超出所能表示的范围是，溢出，大于最大正数称为正溢，小于最小负数称之为负溢 检测溢出 (1)单符号位： 当两个同号的数值进行加减操作后，所得到的结果的符号位与之不同时，则发生了溢出。 **缺点**：如果符号位的后一位在运算过后产生了进位，可能会影响检测溢出结果的正确性 (2)采用进位位 在考虑了进位对符号位的影响后，进行改进得到的 如果符号位产生进位而最高有效位没有进位时，发生负溢 如果符号位没有进位，而最高有效位发生进位时，发生正溢 (3)采用变形补码(双符号位补码) 双符号位的含义如下： $S_{S1}S_{S2}=00$,结果为正数，无溢出 $S_{S1}S_{S2}=01$,正溢 $S_{S1}S_{S2}=10$,负溢 $S_{S1}S_{S2}=11$,结果为负数，无溢出","path":"2021/05/21/定点数的加减法/","date":"05-21","excerpt":"数值运算的核心是指加、减、乘、除四则算术。由于计算机中的数有定点和浮点两种表示形式，因此相应有定点数的运算和浮点数的运算。本文将介绍计算机中定点数的加减法运算过程。 注意，理解本文的前提是要清楚知道顶点数的源码、反码和补码的含义，以及定点数在计算机中的表示形式。","tags":[]},{"title":"指令系统","text":"一.指令系统的发展与性能要求一个好的指令系统一般满足以下几个要求： 完备性 规整性 高效率 兼容性 一条指令一般提供两方面的信息 指明操作的性质及功能 给出与操作数有关的信息，如直接给出操作数本身或是指明操作数的来源，运算结果存放在何处，以及下一条指令从何处取得等。 二.指令格式2.1 指令字长在设计指令格式时需要考虑以下一些问题： 指令字长需要多少位，是定子长还是变字长 操作码结果需要多少位，位数与位置固定还是可拓展；是一段操作码还是由若干段组成 地址结构——一条指令的执行涉及那些地址，在指令中给出了哪些地址，哪些地址是隐含约定的 寻址方式——如何获得操作数地址，是直接给出还是间接给出，还是经过变址计算所得等 机器字长：计算机能直接处理的二进制数据的位数，机器字长一般等于内部寄存器的大小，它决定了计算机的运算精度。 指令字长：一个指令中包含二进制代码的位数。 存储字长：一个存储单元存储二进制代码的长度，必须是字节的整数倍 指令字长的选择： 指令字长尽可能短 指令字长应等于字节的整数倍，以免浪费存储空间 指令字长一般都取存储字长的整数倍，如果指令字长等于存储字长的2倍，就需要2次访存来取出一条指令，因此取指周期是机器周期的2倍，若指令周期等于存储字长，则取指周期等于机器周期。 2.2 指令的操作码指令操作码的编码可以分为规整型和非规整型 规整型： ​ 当指令字长较长时，允许有足够的操作码位数，可以采取定长编码方式。 ​ 定长编码对于简化硬件设计，减少指令译码的时间是非常有利的，通常在指令字长较长的大型、中型计算机就及超级小型计算机上广泛采用 非规整型： ​ 拓展操作码法：操作码位数不采用单一固定不变的位数，而是随地址码个数的变化而变化，操作码采取可变长度的类型 ​ 拓展操作码的注意点： 不允许短码是长码的前缀 各条指令的操作码一定不能重复雷同 各类指令的格式安排应统一规整 2.3 地址码的结构显地址：在指令中明显给出地址，如写明存储单元号或寄存器号 隐地址：以隐含的方式约定，如事先隐含约定操作数在某个寄存器中，或是在堆栈中 四地址指令 $(A_1) OP(A_2)\\rightarrow A_3 \\\\ A_4 = 下一条执行指令的地址$ 三地址指令 $(A_1)OP(A_2)\\rightarrow A_3 \\\\ (PC)+1\\rightarrow PC(隐含)$ 执行一条三地址的双操作数运算指令，至少需要访问4次主存储器**。第一次取指令本身，第二次取第一操作数，第三次取第二操作数，第四次保存运算结果 二地址指令 $(A_1)OP(A_2)\\rightarrow A_1 \\\\ (PC)+1\\rightarrow PC(隐含)$ 同样需要至少访问四次主存储器 一地址指令 $(AC)OP(A_1)\\rightarrow AC \\\\ (PC)+1\\rightarrow PC(隐含)$ AC为累加寄存器 执行一条一地址的双操作数运算指令，只需要访问2次主存储器。第一次取指令本身，第二次取第一操作数。第二操作数和运算结果都放在AC中，所以读取和存入都不需要访问主存储器 零地址指令 零地址的算数逻辑类指令用在堆栈计算机中的，堆栈计算机没有一般计算机中必备的通用寄存器，因此堆栈成为提供操作数和保存结果的唯一场所 指令格式类型： 存储器——存储器(SS)型指令 寄存器——寄存器(RR)型指令 寄存器——存储器(SR)型指令 通常一个指令系统中指令字的长度和指令中的地址结构并不是单一的，往往采用多种格式混合使用，这样可以增强指令的功能 三.寻址技术3.1 编制方式编制方式：对各种存储设备进行编码的方法 常用的编制单位：字编址，字节编址，位编址等 字编址 控制方式实现简单，地址信息，存储容量等没有任何浪费 缺点是没有对非数值计算提供支持，而非数值计算应用要求按字节编码，因为它的基本寻址单位是字节 字节编址 最大优点：能使编制单位与信息的基本单位（字节）相一致 存在着地址信息的浪费 3.2 指令的寻址方式在存储器中，操作数或指令字写入或读出的方式可分为：地址指定方式，相联存储方式和堆栈存取方式 寻址方式分为两类：指令寻址方式和数据寻址方式 寻找下一条将要执行的指令的地址成为指令寻址，又可以细分为顺序寻址和跳跃寻址 顺序寻址方式：通过程序计算器PC加1，自动形成下一条指令的地址 跳跃寻址方式：所谓跳跃指的是下条指令的地址吗不是由程序计数器PC给出，而是由本条指令给出的 3.3 操作数的寻址方式操作数寻址方式：形成操作数的有效地址的方式 有效地址：是操作数在主存的地址或寄存器地址，是操作数真正的地址 形式地址：指令字中给定的地址量。 寻址方式特征位，通常由间址位和变址位组成，如果这条指令无间址和变址的要求，那么形式地址就是操作数的有效地址 **寻址过程就是把操作数的形式地址变化为操作数的有效地址的过程** 数据寻址方式： 立即数寻址方式 指令的地址码字段指出的不是操作数的地址，而是操作数本身 例如：IF I &gt; 25 THEN J = K + 12,这里常量12和25均由立即数寻址指定 直接寻址方式 直接寻址方式： 操作数在主存储器中，指令中直接给出操作数所在主存储器单元的有效地址 寄存器（直接）寻址方式：操作数在指定的寄存器中 例如：ADD P, Q, R，表示将存储单元Q的内容与R的内容相加，并将结果保存在存储单元P中（ARM中的寻址可能不太一样） 间接寻址方式 间址方式：指令中给出的地址是存放操作数地址的主存储器单元的地址，可以有多级间址 寄存器间接寻址方式：地址字段指的是存储位置还是寄存器 指令地址字段中的形式地址A不是操作数的真正地址，而是操作数地址的指示器 获得一个操作数需要3次访问：读指令，读含有操作数地址的寄存器，以及最后读出实际的操作数 相对寻址方式 把程序计数器PC中的内容加上指令格式中的形式地址（偏移量）D形成操作数的有效地址。即是EA=(PC)+D 基址寻址方式 同相对地址，不过EA = [$R_i$]+D，其中Ri是基址寄存器，里面存放的是基准地址 优点：扩大寻址能力，因为基址寄存器的位数可以设置得很长从而在较大得存储空间中寻址 变址寻址方式 通过将变址寄存器$R_x$的内容与形式地址相加来形成操作数的有效地址，即EA=($R_x$)+A 变址寻址和基址寻址的区别：基址寄存器提供的基准值是固定的，而变址寄存器提供的修改量是可变的 堆栈寻址 在软堆栈中，堆栈的长度（堆栈中元素的数目）是可变的 在一般的计算机中，堆栈从高地址向低地址扩展，即栈底的地址总是大于或等于栈顶的地址（也有反过来的） 隐含寻址方式 不明显给出操作数的地址，而是在指令中隐含着操作数的地址，例如AC（累加寄存器）","path":"2021/05/21/指令系统/","date":"05-21","excerpt":"","tags":[]},{"title":"定点数的乘、除法运算","text":"移位分为算术移位，逻辑移位和循环移位三类，它们又可以分为左移和右移 算术移位规则原码的移位规则：负数的原码移位后的空出位补0 补码的移位规则： 负数的补码左移后的空出位补0 负数的补码右移后的空出位补1 移位功能的实现：通过移位操作由移位寄存器来实现，也有在加法器的输出的加一个实现直传、左移一位和右移一位的控制逻辑电路（称为移位器） 定点乘法运算原码一位乘法的规则为： 参加运算的操作数取其绝对值 令乘数的最低位为判断位 若位1，加被乘数 若为0，不加被乘数 累加后的部分积右移一位（这里是逻辑移位） 重复n次2，3步 符号位单独处理，同号为正，异号为负 例题： 已知：X=0.1101, Y=-0.1011, 求X*Y \\\\ |X| = 00.1101 \\rightarrow B, \\\\ |Y| = .1011 \\rightarrow C, 0 \\rightarrow A \\\\ 补码一位乘法校正法： 被乘数任意，乘数为正：同原码乘，但加和移位按补码规则运算，乘积的符 号自然形成 被乘数任意，乘数为负：乘数$[Y]_{补}$，去掉符号位，操作同①，最后加$[-X]_{补}$，校正 Booth算法： 以小数为例子： 设$[X]_补 = X_s.X_1X_2…X_n\\quad[Y]_补=Y_S.Y_1Y_2…Y_n$ $[X*Y]_补 $ $ = [X]_补(0.Y_1Y_2…Y_n) - [X]_补 * Y_s$ $=[X]_补(Y_12^{-1}+Y_22^{-2}+…+Y_n2^{-n}) - [X]_补*Y_s$ $=[X]_补\\ (-Y_s + Y_12^{-1} + Y_22^{-2} + … + Y_n2^{-n})$ $=[X]_补=[-Y_s + (Y_1 - Y_12^{-1}) + (Y_22^{-1} - Y_22^{-2}) + … + (Y_n2^{-(n-1)}-Y_n2^{-n})]$ $=[X]_补 = [(Y_1-Y_s) + (Y_2 - Y_1)2^{-1} + … + (Y_n - Y_{n-1}2^{-(n-1)}) + (0 - Y_n)2^{-n}]$ 递推公式： [Z_0]_补 = 0\\\\ [Z_1]_补 = 2^{-1}\\{[Z_0]_补 + (Y_{n+1}-Y_{n})[X]_补\\}\\\\ [Z_2]_补 = 2^{-1}\\{[Z_1]_补 + (Y_{n}-Y_{n-1})[X]_补\\}\\\\ ...\\\\ [Z_n]_补 = 2^{-1}\\{[Z_n-1]_补 + (Y_{2}-Y_{1})[X]_补\\}\\\\ \\therefore [X*Y]_补 = [Z_n]_补 + (Y_1 - Y_s)[X]_补其中，$[Z_0]_补$为初始部分积，$[Z_1]_补\\sim[Z_n]_补$依次为各次求得的累加并右移之后的部分积 描述：对于乘数$[Y]_补 = Y_1Y_2…Y_n$,被乘数$[X]_补=X_1X_2….X_n$ 若乘数当前位为1，下一位为0，则用部分积减去乘数，得到新的部分积 若乘数当前位为0，下一位为1，则用部分积加上乘数，得到新的部分积 若乘数当前位与下一位相同，则什么都不做 上诉操作后按照补码规则右移 注意事项： 当被乘数与部分积相加时，产生的进位将被丢弃 部分积移位时，使用算数移位，最高位补符号位 乘法开始时，乘数的当前位（n）为其最低位，下一位（n+1）为0 定点数的除法运算比较法原码恢复余数法步骤： 将除数的最高位与被除数的最高位对齐 从部分被除数中减去除数，得到新的部分被除数 若新的部分被除数为负，则商左移一位，最低位补0，并用新的部分被除数加上除数，恢复原先的部分被除数 若新的部分被除数为正，则商左移一位，最低位补1 判断除法是否结束。若除数的最低位与部分被除数的最低位对齐，则除法结束。最后的部分被除数就是余数 将除数右移1位，从第②步继续执行 原码恢复余数法在计算机中一般很少采用 原码不恢复余数除法和原码恢复余数除法的区别是： 若新的部分被除数为正，商左移一位，最低位补1，部分被除数减去除数 先对除数进行右移再判断新的部分被除数为正为负 例题： 假设X=-0.10101,Y=0.11110,求X\\div Y\\\\ 预先准备:\\\\ |X|=00.10101 \\rightarrow A \\\\ |Y|=00.11110 \\rightarrow B \\\\ 0 \\rightarrow C \\\\ [|Y|]_{变补} = 11.00010","path":"2021/05/21/定点数的乘法运算/","date":"05-21","excerpt":"移位分为算术移位，逻辑移位和循环移位三类，它们又可以分为左移和右移","tags":[]},{"title":"数值数据的表示方法","text":"计算机只能识别二进制数，计算机需要处理的数（无符号数，有符号数等）。数据可分为两大类：数值数据，非数值数据。前者数量的多少；后者字符汉字图像等。 原码表示法 [X]_原 = \\left\\{\\begin{aligned}\\begin{equation} X, \\qquad 2^n > X\\ge 0 \\\\ 2^n-X, 0\\ge X>-2^n \\end{equation}\\end{aligned} \\right.​其中n为小数点前的位数，小数时n=0 补码表示法模：一个字长为n+1位的纯整数的溢出量为$2^{n+1}$，即是以$2^{n+1}$模。一个纯小数的溢出量为2同余：两个整数A，B除于同一个整数M，所得余数相同，称A和B对模M同余只要确定了一个模，就可以找到一个与负数等价的正数来替代此负数，而这个正数可以用模加上负数本身求得，这样就可把减法运算用加法实现了 [X]_补 =\\left\\{\\begin{aligned}\\begin{equation} X, \\qquad\\quad 1 > X \\ge 0 \\\\ 2^{n+1} + X, 0 > X \\ge -1(mod2) \\end{equation}\\end{aligned}\\right.​小数n=0 补码快捷方式：数值部分按位取反，末尾加1，符号位不变 定点表示法小数点的位置固定为最高有效位之前，符号位之后，记为$X_s.X_1X_2…X_n$ 定点小数的小数点位置是隐含约定的，并不需要真正的占据一个二进制位 当$X_s = 0$ 由$.X_1X_2…X_n都为1时为最大正数$ 最大正数为：$X_{最大正数} = (1 - 2^{-n})$由$.X_1X_2…X_n都为0时为最小正数$ 最小正数为：$ X_{最小正数}=2^{-n}$当$X_s = 1$ 原码表示中由$.X_1X_2…X_n都为1时为最小负数$ 原码表示最小负数为：$X_{最小负数} = -(1-2^{-n})$补码表示中由$.X_1X_2…X_n$都为0时为最小负数 补码表示的最小负数为：$X_{最大负数} = -1$整数和上面同理在这里，为什么最大负数为-1？，在补码中，零具有唯一确定性，补码比原码少一个-0的表示，多一个-1的表示以及整数表示范围多了一个$-2^{n}$ 移码由于补码很难直接判断真值大小，因为如果一个负数和正数比较会出现$[+21]_{补}=010101$和$[-21]_{补}=101011$比较出现$010101$小于$101011$的结果，然而实际上真值是$+21$大于$-21$，此时我们可以将所有的数往正数方向偏移一定的量，使得负数为正，再来比较数值的就不会出错 定义$[X]_{移} = 2^n + X(2^n&gt;X\\ge -2^n)$ $[X]_{移} = [X]_{补} + 2^n$","path":"2021/05/21/数值数据的表示方法/","date":"05-21","excerpt":"计算机只能识别二进制数，计算机需要处理的数（无符号数，有符号数等）。数据可分为两大类：数值数据，非数值数据。前者数量的多少；后者字符汉字图像等。","tags":[]},{"title":"数据传输过程及以太网帧结构","text":"TCP/IP支持多种不同的数据链路层协议，这取决于网络所使用的硬件。基于不同硬件的网络使用不同形式的帧结构，以太网是当今应用最广泛的局域网技术。 [TOC] 以太网传输的数据帧有两种格式：Ethernet II帧结构、IEEE 802.3格式 两种协议的区别是： Ethernet II格式包含一个类型类型(Type)字段，标识以太帧处理完成之后将被发送到哪个上层协议及逆行处理 IEEE 802.3个格式中，同样的位置是长度(Length)字段 如何区分两种协议： Length/Type \\ge 1536(0x0600) \\quad Ethernet II \\\\ Length/Type \\le 1500(0x05DC) \\quad IEEE 802.3**目前以太网大多数数据帧使用的Ethernet II格式** 以太网在数据链路层通过MAC地址来唯一识别网络设备，并且实现局域网上网络设备之间的通信。 MAC地址也叫物理地址、硬件地址，大多数网卡厂商把MAC地址烧入网卡的ROM中，网络设备的MAC地址是全球唯一的 局域网帧的发送方式 单播：指从单一源端发送到单一的目的端。MAC地址中，第一字节第八个比特($b_0$)表示地址类型。对于主机MAC地址，这个比特固定位0 广播：指帧从单一的源端发送到共享以太网上的所有主机。广播帧的目的MAC地址为16进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接受并处理这个帧 组播：组播转发可以理解为选择性的广播，组播MAC地址通过第一字节第八个比特($b_0$)区分，这个比特为1 以太网帧标识封装成帧：指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧 帧头和帧尾包含有重要的控制信息 帧头和帧尾的作用之一就是 以太网通过增加前同步码和帧开始定界符来标识一个帧的开始和结束 在传输媒体上实际传送的要比MAC帧还要多8个字节(由硬件生成)。这8个字节由两个字段构成，第一个字段是7个字节的前同步码(1和0交替码)。第二个字段是帧开始定界符，定义为10101011 以太网帧校验采用CRC校验 由于以太网规定了帧间间隔时间96比特的发送时间，因此MAC帧不需要帧结束定界符 透明传输：数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样1. 面向字节的物理链路使用字节填充(字符填充)来实现透明传输 面向比特的物理链路使用比特填充的方法实现透明传输 在传输数据时，发送方数据链路层收到上层交付的协议数据单元，添加帧头和帧尾使之成为帧。但是如果数据中恰好包含这个特定数值，接收方将无法正确的接收数据。 面向字节：这个时候在发送帧之前，对帧的数据部分进行扫描。每出现一个帧定界符(flag)就在它前面添加一个转义字符(ESC), 面向比特：例如帧定界标志为01111110，在发送前对帧的数据部分进行扫描，每连续出现五个1就插入一个0，这样防止数据中出现帧定界标志 转义字符是一种特殊的控制字符，其长度一个字节，十进制值为27 为了提高帧的传输速率，应当使帧的数据部分长度尽可能的大些 考虑到差错控制多种因素，每一种数据链路层都规定了帧的数据部分长度上限，也就是最大传输单元MTU MAC地址，IP地址和ARP协议MAC地址是以太网的MAC子网所使用的地址，位于数据链路层 IP地址是TCP/IP体系结构的网络层所使用的地址 ARP协议属于TCP/IP体系结构的网络层。其作用是已知设备所分配的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址","path":"2021/05/21/数据传输过程及以太网帧结构/","date":"05-21","excerpt":"TCP/IP支持多种不同的数据链路层协议，这取决于网络所使用的硬件。基于不同硬件的网络使用不同形式的帧结构，以太网是当今应用最广泛的局域网技术。","tags":[{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"数据校验码","text":"数据校验是为保证数据的完整性进行的一种验证操作。通常用一种指定的算法对原始数据计算出的一个校验值，接收方用同样的算法计算一次校验值，如果两次计算得到的检验值相同，则说明数据是完整的 1.什么是错误$1$变成$0$，$0$变成$1$ 2.什么样的编码具有检错纠错能力码距：任意两个码字之间最少变化的二进制位数 具有检错纠错能力的数据校验码的实现原理是：在编码中，除去合法的码字，再加进一些非法的码字，当某个合法的码字出现错误时，就变成非法码字 对于码距≥2的数据校验码，开始具有检错能力，码距越大，检、纠错能力就越强，而且检错能力总大于或等于纠错能力 3.如何发现错误奇偶校验码校验位的取值（0或1）将使得整个校验码中”1”的个数为奇数或偶数： 奇校验——使得整个校验码中”1”的个数为奇数 偶校验——使得整个校验码中”1”的个数为偶数 交叉奇偶校验：传送数据块时，不仅每个字节有一个奇偶校验做横向校验，而且全部字节的同一位也设置一个奇偶校验做纵向校验 4. 如何确定错误的位置海明校验码校验位K，信息位N，则$2^{K+1} \\ge N+K+1 $ (1)编码 一个字节由8位二进制位组成，此时N=8， K=5，故海明码总位数为N+K=13，表示为：$H_{13}\\ H_{12}…H_{2}\\ H_{1}$ 五个校验位$P_5~P_1$对应的海明码位为:$H_{13}、H_{8}、H_{4}、H_{2}、H_{1}$,除$P_5$外其余四位满足$P_i中i等于2^{i-1}$的关系，而$P_5$只能放在$H_{13}$ P_1校验的是$D_1、D_2、D_4、D_5、D_7$，对应的海明码为$H_1(1),H_5(4+1),H_7(4+2+1),H_9(8+1),H_{11}(8+2+1)$,化位二进制就会发现，都有一个$XXXXXXX1$的形式，也就是说$P_i$校验的是二进制中权值为i的位数值为1的那些位数$(D_{位数})$,P2,P3,P4,P5同理 则$P_1=D_1\\oplus D_2\\oplus D_4\\oplus D_5\\oplus D_7$，用同样的方法将其他$P_i$求出 (2)校验 将接收到的海明码按如下关系进行偶校验： 如右所示：$S_1=P_1\\oplus D_1\\oplus D_2\\oplus D_4\\oplus D_5\\oplus D_7$ ，即将$P_1$和对应的$D_i$进行异或算出结国 然后依次求出$S_2\\ S_3\\ S_4\\ S_5$ ① 如果$S_5 \\sim S_1为00000$时，表明无错 ② 如果$S_5 \\sim S_1$仅有一位不为$0$，表明是某一位校验位出错或三位海明码同时出错 ③ 如果$S_5 \\sim S_1 $有两位不为$0$，表明是两位海明码同时出错，但无法确定出错位置 ④ 如果$S_5 \\sim S_1$有三位不为$0$，表明是一位信息位出错或三位校验位同时出错，出错位置由$S_4 \\sim S_1 $四位编码指明","path":"2021/05/21/数据校验码/","date":"05-21","excerpt":"数据校验是为保证数据的完整性进行的一种验证操作。通常用一种指定的算法对原始数据计算出的一个校验值，接收方用同样的算法计算一次校验值，如果两次计算得到的检验值相同，则说明数据是完整的","tags":[]},{"title":"编码与调制","text":"无线收发模块用于传感器节点间的数据通信,解决无线通信中载波频段选择、信号调制方式、数据传输速率,编码方式等,并通过天线进行节点间、节点与基站间数据的收发。与一般的网络通信类似,传感器网络的数据通信协议也包括了物理层、链路层、网络层和应用层,与节点硬件平台有关的主要是物理层和链路层 基带信号分为 数字基带信号 模拟基带信号 信道可分为： 数字信道 模拟信道 对于数字信号​ 在不改变信号性质的前提下，仅对数字基带信号的波形进行变换，成为编码，编码后的信号仍为数字信号 把数字信号的频率范围搬移到较高的频段，并转化为模拟信号，称为调制 ​ 对于模拟信号同上 码元在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形 传输媒体和信道不能划等号一个传输媒体只有一条发送信道和一条接收信道，而信道却可以通过复用技术拥有多条发送信道和接收信道 常用编码 不归零编码 需要额外一条传输线来传输时钟信号，使发送方和接收方同步 由于存在同步问题，计算机网络的数据传输不采用这种编码 归零编码 每个码元传输结束后信号都要归零，所以接收方只要信号归零后进行采样即可，不需要单独的时钟信号 归零编码相当于把时钟信号用归零方式编码在数据内，这称为自同步信号 归零编码中大部分的数据带宽用来传输归零而浪费掉了，编码效率低 曼切斯特编码 码元中间时刻的跳变即表示时钟，又表示数据 传统以太网用的这种编码 差分曼切斯特编码 跳变仅表示时钟 码元开始处电平是否发生变化表示数据 10BaseT以太网使用的曼切斯特编码基本调制方法 使用基本调制方法，一个码元只能包含一个比特信息，如何使用一个码元包含更多的比特呢？​ 因为频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个 ​ 通常情况下，相位和振幅可以结合来一起调制，称为正交振幅调制QAM","path":"2021/05/21/编码与调制/","date":"05-21","excerpt":"无线收发模块用于传感器节点间的数据通信,解决无线通信中载波频段选择、信号调制方式、数据传输速率,编码方式等,并通过天线进行节点间、节点与基站间数据的收发。与一般的网络通信类似,传感器网络的数据通信协议也包括了物理层、链路层、网络层和应用层,与节点硬件平台有关的主要是物理层和链路层","tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"物理层概述","text":"物理层（或称物理层，Physical Layer）是计算机网络OSI模型中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的数据可在各种物理媒体上传输。局域网与广域网皆属第1、2层 2.1物理层的基本概念用于物理层的协议被称为物理层规程 物理层的主要任务描述为确定与传输媒体的接口有关的一些特性： 机械特性 电气特性 功能特性 过程特性 数据在计算机内部多采用并行传输方式，但数据在通信线路上的传输方式一般都是串行传输 2.2 数据通信基础知识 2.2.1数据通信系统的模型 一个数据通信系统可划分为三大部分： 源系统（发送端、发送方），一般包含以下两部分： 源点：源点设备产生要传输的数据 发送器：通常源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输 传输系统（传输网络） 目的系统（接收端、接收方），一般包含以下两部分： 接收器：接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息 终点：终点设备从接收器获取传送来的数字比特流，然后把信息输出 一些术语： ​ 通信的目的是传送消息，数据是运送消息的实体，根据RFC 4949的定义，数据是使用特定方式表示的信息，信号是数据的电气或电磁表现。 根据信号中代表消息的参数的取值不同，信号可分为两大类： 模拟信号，或连续信号 数字信号，或离散信号 2.2.2 有关信道的几个基本概念信道和电路并不同，信道一般都是用来表示向某一个方向传送消息的媒体。因此通信电路往往包含一个发送信道和一条接受信道 从通信的双方交互的方式来看，可以有以下三种基本方式： 单向通信：只能有一个方向的通信而没有反方向的交互，无线电广播或有线电广播以及电视广播就属于这种类型 双向交替通信：通信双方都可以发送消息，但不能双方同时发送 双向同时通信：通信双方可以同时发送和接收信息 **来自信源的信号常称为基带信号** 基带信号往往包含较多的低频成分，甚至直流成分，而许多信道并不能传输这种低频分量或直流分量，为了解决这一问题，就必须对基带信号进行**调制** 调制可分为两大类 基带调制：仅仅对基带信号的波形进行变换，变换后仍是基带信号，也称这一过程为编码 使用载波进行调制：把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，经过载波调制后的信号称为带通信号，而使用载波的调制称为带通调制 常用编码方式 不归零制：正电平为1，负电平为0 归零制：正脉冲为1，负脉冲为0 曼切斯特编码：位周期中心的向上跳代表0，位周期中心的向下跳代表1。也可以反过来定义 差分曼切斯特编码：在每一位的中心始终有跳变，位开始边界的跳变代表0，位开始边界没有跳变代表1 基本的带通调制方法 调幅（AM）：载波的振幅随基带数字信号的变化而变化 调频（FM）：载波的频率岁基带数字信号而变化 调相（PM）：载波的初始相位岁基带数字信号而变化 为了达到更高的信号传输速率，必须采用技术上更为复杂的多元制的振幅相位混合调制方法。例如正交振幅调制 2.2.3 信道的极限容量数字通信的优点：虽然信号在信道上传输会不可避免的失真，但在接收端只要从失真的波形识别出原来的信号，那么这种失真对通信质量就没有影响 限制码元在信道上的传输速率大的因素有以下两个： 信道能够通过的频率范围：具体的信道所能通过的频率范围是有限的，信号中的高频分量往往不能通过信道 信噪比：噪声存在于所有的电子设备和通信信道中，噪声会使接收端对码元的判决（识别）产生错误 需要知道的是：在任何信道中，码元传输的速率是由上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使得接收端对码元的识别成为不可能 所谓的信噪比就是信号的平均功率和噪声的平均功率之比，记为$\\frac{S}{N}$,并用分贝（dB）作为度量单位 信噪比（dB）= $10log_{10}(\\frac{S}{N})(dB)$ 信道的极限信息由香农公式传输速率$C = W log_{2}(1+\\frac{S}{N})(bit/s)$ 其中W为信道带宽，S为信道所传信号的平均功率，N为信道的高斯噪声功率 **香农公式指出，信道的带宽或信道中的信噪比越大，信道的极限传输速率就越高**","path":"2021/05/21/物理层/","date":"05-21","excerpt":"物理层（或称物理层，Physical Layer）是计算机网络OSI模型中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的数据可在各种物理媒体上传输。局域网与广域网皆属第1、2层","tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"网络协议与网络体系结构","text":"网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。它广泛采用的是国际标准化组织（ISO）在1979年提出的开放系统互连（OSI-Open System Interconnection)的参考模型 OSI失败的原因 OSI的专家们缺乏实际经验，他们在完成OSI标准时缺乏商业动力 OSI的协议实现起来过于复杂，而且运行效率很低 OSI标准的制定周期太长，因而使得OSI标准生产的设备无法及时进入市场 OSI的层次划分不太合理，有些功能在多个层次中重复出现 网络协议三要素 语法：数据与控制信息的结构或格式 语义：需要发出何种控制信息，完成何种动作以及做出何种响应 同步：即事件实现顺序的详细说明 分层的好处 各层之间是独立的：某一层不需要知道其他层如何实现，仅仅需要知道通过层间接口所提供的服务 灵活性好：只要层间接口关系不变，则其他层均不受影响 结构上可分割开：各层都可以采用最合适的技术实现 易于实现和维护：使得实现和调试一个庞大又复杂的系统变得易于处理，因为整个系统被分解为若干个相对独立的子系统了 能促进标准化工作：因为每一层的功能及其所提供的服务都已经有了精确的说明 通常各层所要完成的功能主要有以下一些 差错控制：使相应层次对等方的通信更加可靠 流量控制：发送端的发送速率必须使接收端来得及接收 分段和重装：发送端将要发送的数据块划分为更小的单位，在接收端复原 复用和分用：发送端几个高层会话复用一条低层的连接，在接收端再进行分用 连接建立和释放：交换数据前先建立一条逻辑连接，数据传输结束后释放连接 分层也有缺点，有些功能会在不同的层次中重复出现，因而产生额外的开销 体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件","path":"2021/05/21/网络协议与网络体系结构/","date":"05-21","excerpt":"网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。它广泛采用的是国际标准化组织（ISO）在1979年提出的开放系统互连（OSI-Open System Interconnection)的参考模型","tags":[{"name":"计算机网络概述","slug":"计算机网络概述","permalink":"https://reiscarlet.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"}]},{"title":"网络设备","text":"网络设备及部件是连接到网络中的物理实体。网络设备的种类繁多，且与日俱增。基本的网络设备有：计算机（无论其为个人电脑或服务器）、集线器、交换机、网桥、路由器、网关、网络接口卡（NIC）、无线接入点（WAP）、打印机和调制解调器、光纤收发器、光缆等 1.集线器 目的：解决终端主机的物理连接问题，将在其内部所有的网络设备联通 不过滤任何数据，也不知道数据发送到什么地方 终端集中点，通过集线器形成星型拓扑 物理层设备 对信号整型放大 共享一个信道，性能比较差 会将信息传到除自己以外的所有主机，哪怕只想和其中的一个通信，造成浪费带宽 因为不能读取IP地址，所以不能在外部网络（例如互联网）交换数据 2.交换器 数据链路层设备，能够解析数据帧结构 使用MAC地址，能够根据MAC地址进行主机的定位寻址，所以信息只会发送到目的主机减少带宽的浪费和集线器不同 独享信道，所以交换机的性能远远超过集线器 不能读取IP地址 3.路由器 实现网络连接进行数据交换 网络层设备 可以读取IP地址，所以可以将数据包发送到外部网络 输入输出端口安装了三种协议软件，分别是物理层，数据链路层，网络层 总之，集线器和交换机构建网络，路由器将网络与网络连接起来4.防火墙 防火墙是一个系统，用来防止未经授权的网络传输侵入私有的网络系统，是由过滤传输的数据来达到这个效果 目的：要在公共网络和私人的网络间建立一道流量管控机制 防火墙由网络管理员管理和制定规则 防火墙可以针对网域名，协议，软件，IP地址，端口和关键词来制定规则 防火墙有多种形式，一种是主机式防火墙，一种是软件式防火墙，网络式防火墙 5.无线接入点（WiFi） 延申网络覆盖范围 移动设备接入点","path":"2021/05/21/网络设备/","date":"05-21","excerpt":"网络设备及部件是连接到网络中的物理实体。网络设备的种类繁多，且与日俱增。基本的网络设备有：计算机（无论其为个人电脑或服务器）、集线器、交换机、网桥、路由器、网关、网络接口卡（NIC）、无线接入点（WAP）、打印机和调制解调器、光纤收发器、光缆等","tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"TCP","text":"[TOC] 一、TCP协议的主要特点 支持面对连接的传输服务 支持全双工通信 支持同时建立多个并发的TCP连接 支持可靠的传输服务 支持字节流的传输 二、TCP报文的首部格式 序号：指出本TCP报文段数据载荷的第一个字节的序号 确认号：指出希望收到对方下一个TCP报文段的数据载荷的第一个字节的序号，同时也是对之前收到的所有数据的确认 数据偏移：4比特，最大表示15*4比特。用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远 校验和：在计算校验和时候，要在TCP报文段的前面加上12字节的伪首部 复位标识符RST：用来复位TCP连接 当RST=1时，表明TCP连接出现了异常，必须释放连接，然后再重新建立连接。 RST=1还能用来拒绝一个非法的报文段或拒绝打开一个TCP连接 紧急指针：占16比特，用来指明紧急数据的长度。当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立即封装到一个TCP报文段中进行发送 选项： 最大报文段长度MSS选项：TCP报文段数据载荷部分的最大长度 窗口扩大选项 时间戳选项： 用来计算往返时间RTT 用来处理序号超范围的情况，又称为防止序号绕回PAWS 选择确认选项 填充：由于选项的长度可变，因此使用填充来确保报文段首部能被4整除，因为数据偏移字段是以4字节为单位 TCP连接的三个阶段： 建立TCP连接 数据传送 释放TCP连接 三、TCP连接的建立TCP连接的建立需要解决的三个问题： 使TCP双方能够确认对方的存在 使TCP双方能够协商一些参数 使TCP双方能够对运输实体资源进行分配 TCP使用”三次握手“建立连接 为什么TCP客户进程最后还要发送一个普通的TCP确认报文段呢？假设我们改为“两次握手”来建立TCP的连接，则可能出现一种情况。如果上一次的TCP连接请求因为各种原因延迟到达，在这期间，客户端又发起一次TCP连接请求，并建立连接。在进行数据传输后释放了连接。结果在这段时间延迟的TCP连接请求已经失效，但上一次延迟的TCP连接可能才到达，并且服务器向客户端发送报文并处于连接已建立的状态，而客户端因为没有再发送连接请求，所以不会理会该报文。此时就出现客户端处于未连接状态，而服务器端处于连接状态。 如果是“三次握手”，因为多了一步连接确认报文。TCP连接请求失效后，收到服务器端发送的报文，将不会理会。服务器端因为没有接收到报文，则连接无法建立！ 四、TCP连接的释放 1. 注意点：当服务器端发送TCP确认报文段后，服务器端的TCP连接将会断开，然后再向客户端发送TCP释放请求，而不是整个过程结束后客户端和服务器端一起断开连接。 MSL（Maximum Segment Lifetime）：最长报文段寿命，一般设置为2min。也就是说客户端在进入TIME-WAIT状态，还要经过4min才能进入关闭状态 2. 为什么不直接进入CLOSED状态，而是要先进入TIME-WAIT如果在最后客户端向服务器端发送的TCP确认报文段没有到达客户端。那么超时后，客户端将重新发送TCP连接释放报文。但是此时如果已经进入CLOSE状态，并不会理会该报文。然后客户端一指发送TCP连接释放报文，一直处于LAST-ACK状态 3. 保活计时器TCP服务器进程没收到一次TCP客户进程的数据，就重新设置并启动保活计时器（2小时定时） 若保活计时器定时周期内未收到TCP客户进程发送的数据，则当保活计时器到时后，TCP进程就像TCP客户进程发送一个探测报文，以后每隔75秒发一次，十次后仍无TCP客户进程的回应，TCP服务器进程就认为TCP客户进程在主机发送故障，关闭这个连接 五、TCP可靠传输TCP基于以字节为单位的滑动窗口来实现可靠传输 可靠传输的实现 发送方的发送窗口并不总是和接收方的接收窗口一样大 对于不按序到达的数据，TCP通常将数据临时存放在接收窗口，等到字节流中缺少的字节收到后，再按序交付上层的应用进程 TCP要求接收方必须有累计确认和稍带确认机制。接收方不应该过分的推迟确认，否则会导致发送方不必要的超时重传。确认推迟的时间不应超过0.5s。若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认。 TCP接收双方都有接收窗口和发送窗口 选择确认它允许TCP接收方有选择地确认失序报文段，而不是累积的确认最后一个正确接收地有序报文段。 当将该机制与选择重传（SR）机制结合起来使用时（即跳过重传那些已被接收方选择性确认过地报文段），Tcp看起来就像我们通常使用地SR协议，所以TCP地差错恢复机制也许最好分类为GBN协议与SR协议地混合体 六、TCP的流量控制所谓流量控制，就是让发送方的发送速率不要太快，要让接收方来得及接收 大概的过程如下描述： 假设一开始的rwnd为400字节 发送1~100号字节，还能发送300字节 发送101~200号字节，还能发送200字节 发送201~300号字节，但丢失了，还能发送100字节 接收方返回ACK=201，表示1~200号字节收到，rwnd=100+200=300号字节 发送301~400号字节，还能发送100号字节，因为之前的201~300号字节还没有确认 发送401~500号字节，不能发送新的数据了 超时重传201~300号字节 接收方返回ACK=301，还能发送100字节 发送501~600号字节，不能再发生新的数据了 接收方处理以前的数据，rwnd调整为0 在rwnd=0后，如果接收方处理完数据发送ACK给发送方时的报文丢失，那么就会陷入死锁，即发送方等待接收方的确认报文，接收方等待发送方发新的数据。 为了解决这个问题，TCP要求：当接收方的接收窗口为0时，发送方继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认，最终缓存清空，并在确认报文里将包含一个非0的rwnd值","path":"2021/05/21/TCP/","date":"05-21","excerpt":"","tags":[{"name":"运输层","slug":"运输层","permalink":"https://reiscarlet.github.io/tags/%E8%BF%90%E8%BE%93%E5%B1%82/"}]},{"title":"MAC","text":"MACMAC地址(物理地址、硬件地址·)一般被固化在网卡的电可擦可编程只读存储器EEPROM中 严格来说：MAC地址是对网络上各接口的唯一标识而不是网络上各设备的唯一标识 MAC地址包含两部分：前24比特是组织唯一标识符(OUI)，由IEEE统一分配给设备制造商；后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配 标准表示法：每4个比特写成一个16进制的字符，两个字符一组共六组，组之间用‘-’或‘：’连接，例如XX-XX-XX-XX-XX-XX MAC地址中，第一字节的第7个比特取0表示全球管理，取1表示本地管理 IEEE802.3：MAC地址中，一个字节是$b_7b_6b_5b_4b_3b_2b_1b_0$，比特发送顺序是$b_0\\rightarrow b_7$。字节发送顺序是第一字节到第六字节","path":"2021/05/21/MAC/","date":"05-21","excerpt":"","tags":[{"name":"链路层","slug":"链路层","permalink":"https://reiscarlet.github.io/tags/%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"PPP协议","text":"PPP(Point-to-Point Protocol, P2P)是目前使用最广泛的点对点数据链路层协议 PPP主要由以下三部分组成： 对各种协议的数据报的封装方法 链路控制协议LCP，用于建立、配置以及测试数据链路的连接 一套网络控制协议NCPs，对每一个协议支持不同的网络协议 标志(Flag):PPP帧的定界符，取值为0x7E 地址(Address)：取值为0xFF,预留 控制(Control)：取值为0x03，预留 协议(Protocol)：指明帧的数据部分送交哪个协议处理： 取值0x0021：帧的数据部分为IP数据报 取值0xC021：帧的数据部分为LCP分组 取值0x8021：帧的数据部分为NCP分组 帧检测序列(FCS, Frame Check Sequence)：CRC计算出的校验码 PPP协议的工作状态： 注意：PAP认证过程是两次握手，而CHAP认证是3次握手，CHAP认证比PAP认证的安全性高","path":"2021/05/21/PPP协议/","date":"05-21","excerpt":"PPP(Point-to-Point Protocol, P2P)是目前使用最广泛的点对点数据链路层协议 PPP主要由以下三部分组成： 对各种协议的数据报的封装方法 链路控制协议LCP，用于建立、配置以及测试数据链路的连接 一套网络控制协议NCPs，对每一个协议支持不同的网络协议","tags":[{"name":"链路层","slug":"链路层","permalink":"https://reiscarlet.github.io/tags/%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"IPv6","text":"[TOC] IPv6的优势 IPv6具有更大的地址空间 IPv6使用更小的路由表更大的地址空间 IPv6增加了增强的组播支持以及流支持 IPv6加入了对自动配置的支持 IPv6具有更高的安全性 IPv6的首部 Traffic class（通信量类）：占8位，用来区分不同IPv6数据报的类别或优先级 Flow Label（流标号）：占20位，所有属于同一个流的数据报都具有同样的流标号 流：就是互联网上从特定源点到特定终点的一系列数据报 Payload Length（有效载荷字段）：占16位，指明IPv6数据报除基本首部以外的字节数（所有拓展首部算在有效载荷之内） Next Header（拓展首部）：占8位 当IPv6没有拓展首部，Next Header的作用和IPv4的协议字段一样 当出现拓展首部，Next Header的值标识后面第一个拓展首部的类型 Hop Limit（跳数限制）：占8位，用来防止数据报在网络中无限期地存在，最大255跳，当Hop Limit为0，就要把这个数据报丢弃 拓展首部： IPv6把原来IPv4首部中选项地功能放在拓展首部中，并把拓展首部留给路径两端的源点和终点的主机来处理，路由器都不处理拓展首部（逐跳选项拓展首部除外），这样大大提高路由器的处理效率 IPv6的寻址IPv6地址由8个16进制字段构成，四个十六进制数一组，中间用“：”隔开。IPv6的基本表达方式是X:X:X:X:X:X:X:X，其中X是一个4位16进制整数（16位）。每一个数字包含4个比特 ，每个整数包含4个十六进制数字，每个地址包括8个整数，一共128位 IPv4和IPv6的区别 取消首部长度字段，因为IPv6的首部长度是固定的（40字节） 取消了服务类型字段，因为优先级和Flow Label(流标号)字段实现了服务类型字段的功能 取消了总长度字段，改用Payload length（有效载荷长度）字段 取消了标识、标志和片偏移字段，因为这些功能已包含在分片拓展首部 把TTL字段改为Hop limit（跳数限制）字段，但作用一样 取消了协议字段，改用Next Header（下一个首部）字段 取消了校验和字段 取消了选项字段，而用拓展首部来实现选项功能 IPv6不允许在中间路由器上进行分片与重新组装。这种操作只能在目的地执行。如果路由器接受的IPv6数据报过大而不能转发到出链路上，则路由器只需丢掉该数据报 IPv4到IPv6的过渡技术隧道技术IPv6数据报要进入IPv4网络时，把IPv6数据报封装成为IPv4数据报 当IPv4数据报离开IPv4网络时，再把数据部分（即原来的IPv6数据报）交给主机的IPv6协议栈 双协议栈使一部分主机或路由器装有双协议栈：一个IPv4和一个IPv6。记为IPv6/IPv4。 双协议栈同时域名系统DNS来查询目的主机是采用哪一种地址。若DNS返回IPv4就是IPv4，返回IPv6就是使用IPv6 用IPv4来发IPv6数据报，接收方在把IPv4还原成IPv6过程中，某些字段是无法恢复的 IPv6的写法","path":"2021/05/21/IPv6/","date":"05-21","excerpt":"","tags":[{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"IP地址","text":"[TOC] IP地址IP地址是因特网上主机和路由器使用的地址，用于标识两部分信息： 网络编号：标识因特网上的网络 主机编号：标识同一网络的不同主机或路由器接口 数据报转发过程中IP地址和MAC地址的变化情况 数据包转发过程中源IP地址和目的IP地址保持不变 数据包转发过程中源MAC地址和目的MAC地址逐个链路或逐个网络改变 IP数据报的发送和转发过程源网络地址：将自己的IP地址和子网掩码相与得到 目的网络地址：将目的IP地址和自己的子网掩码相与得到 如果源网络地址和目的网络地址不同，则两个主机不在同个网络，属于间接交付，则由相应的路由器将IP数据报转发给目的主机 那么源主机如何知道将IP数据报交给哪个路由器？为了和其他网络中的主机通信，就必须指定本网络中的一个路由器，由该路由器进行转发，所指定的路由器也称为默认网关 则源主机和不同网络的目的主机通信时，将IP数据报交付给默认网关，由默认网关帮忙转发IP数据报给目的主机 路由器收到IP数据报后如何转发？ 检查IP数据报的首部是否出错。若出错则丢弃并通告源主机 根据IP数据报的目的地址在路由表中查找匹配的条目，若找不到就丢弃并通告源主机，若找到转发给条目指定的下一跳 目的网络地址：将目的地址和路由条目中的地址掩码相与得到 路由器隔离广播域","path":"2021/05/21/IP地址/","date":"05-21","excerpt":"","tags":[{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"ICMP","text":"IP协议并不是一个可靠的协议，它不保证数据被送达，那么，自然的，保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议。ICMP不是高层协议，而是IP层的协议。 为了更有效的转发IP数据报和提高交付成功的机会，在网络层使用了网络控制报文协议ICMP（Internet Control Message Protocol） 主机或路由器使用ICMP来发送差错报文和询问报文 ICMP报文被封装在IP数据报中发送 ICMP差错报告报文： 终点不可达 网络不可达 目的主机不可达 目的协议不可达 目的端口不可达 目的网络未知 目的主机未知 等等十三种 源点抑制：当路由器或主机由于拥塞而丢弃数据时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢 （生存）时间超过： 当路由器收到一个一个目的地址不是自己的IP数据报，会将生存时间TTL字段的值减1 若结果不为0，则将该数据报转发出去 若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文 当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超出报文 参数问题 当路由器或目的主机收到IP数据报后，根据首部中的检验字段和发现首部在传输过程中出现误码，就丢弃该数据报，并向源点发送参数问题报文 改变路由（重定向） 路由器把改变路由报文发送给主机，让主机知道下次应该将数据报发送给另外的路由器 以下情况不应发送差错报告报文： 对ICMP差错报告报文不再发送ICMP差错报告报文 对第一个分片的数据报片的所有后续数据报片都不发生ICMP差错报告报文 对具有多播地址的数据报都不发送ICMP差错报告报文 对具有特殊地址的数据报不发送ICMP差错报告报文 ICMP询问报文回送请求和问答ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问 收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文 这种询问报文用来测试目的站是否可达及了解其有关状态 时间戳请求和问答ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间 在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时间一共有多少秒 这种询问报文用来进行时钟同步和测量时间 ICMP应用举例分组网间探测PING（Packet InterNet Groper） 用来测试主机或路由器间的连通性 应用层直接使用网络层的ICMP（没有通过TCP或UDP） 使用ICMP回送请求和回答报文 跟踪路由traceroute 用来测试IP数据报从源主机到达目的主机主要经过哪些路由器 Windows版本 tracert命令 应用层直接使用网络层ICMP 使用ICMP回送请求和回答报文以及差错报告报文 Unix版本 traceroute命令 在运输层使用UDP协议 仅使用ICMP差错报告报文","path":"2021/05/21/ICMP/","date":"05-21","excerpt":"","tags":[{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"IPv4","text":"网际协议版本4（英语：Internet Protocol version 4，IPv4），又称互联网通信协议第四版，是网际协议开发过程中的第四个修订版本，也是此协议第一个被广泛部署的版本。IPv4是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6，直到2011年，IANA IPv4位址完全用尽时，IPv6仍处在部署的初期 网络层的主要任务是实现网络互连，进而实现数据包在网络之间的传输 实现网络层的任务，需要解决以下主要问题： 网络层向运输层提供怎样的服务 网络层寻址问题 路由选择问题 IPV4就是因特网上的每一个主机的每一个接口分配在一个在全世界范围内是唯一的32比特的标识符 IPV4数据报的首部形式 首部长度：占4比特，表示IP数据报首部的长度，该字段的取值以4字节为单位。 最小十进制取值为5，表示IP数据报首部只有20字节固定部分 最大十进制取值为15，表示IP数据报首部包含20字节固定部分和40字节的可变部分 可选字段：长度从1到40字节不等，用来支持排错，测量及安全措施 填充字段：确保首部长度为4字节的整数倍，使用全0进行填充 总长度：占16比特，表示IP数据报的总长度(首部+数据载荷)，最大取值65535字节 标识、标志、片偏移：共同用于IP数据报分片，当IP数据报长度超过MUT（首部+数据载荷）时将数据报分成几份 标志：占3比特，各比特含义如下： DF位：1表示不允许分片。0表示允许 MF位：1表示后面还有分片，0表示这是最后一个分片 保留位：必须为0 标识：占16比特，属于同个数据报的数据报分片应该具有相同的标识。IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将该值赋给标识字段 片偏移：占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有几个单位 生存时间TTL：8比特，路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器所耗费的时间，若不为0就转发，否则就丢弃 协议：占8比特，指明IPv4数据报部分是何种协议数据单元，常用的一些协议和相应的协议字段值如下 ICMP：1 IGMP：2 TCP：6 UDP：17 IPv6：41 OSPF：89 首部检验和：占16比特，用来检测首部在传输过程中是否出现差错，成为因特网检验和，IPv6中路由器不在计算首部校验和，从而更快的转发IP数据报。由于转发过程中标识等字段可变，所有首部校验和可变 IPv4地址概述因为32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用点分十进制表示方法以方便用户使用 将32比特的IPv4按每8位分为一组，写出每组的十进制数，在四个组间加上小数点 分类编址的IPv4地址： A类地址：8位网络号，24位主机号，网络号的最高位固定位0 B类地址：16位网络号，16位主机号，网络号的最高两位固定为10 C类地址：24位网络号，8位主机号，网络号的最高三位固定为110 D类地址：多播地址. 网络号的最高四位固定为1110 E类地址：保留为今后使用，网络号的最高四位固定为1111 只有A，C，B类地址可分配给主机或路由器的各接口 A类地址：最大网络号127作为本地唤回测试地址，不指派。最小网络号0，保留不指派。可指派的网络数量是$2^8 - 2 = 126$，则可配分的IP地址位$2^{24} - 2 = 16777214$(减去2是除去主机号全0的网络地址和全1的广播地址) B类地址：最小网络号也是第一个可指派的网络号128.0。最大网络号也是最后一个可指派网络号为191.255。可指派的网络号为$2^{(16-2)} = 16384$，每个网络可指派的IP地址为$2^{16} - 2 = 65534$ C类地址：最小网络号也是第一个可指派的网络号为192.0.0。最大网络号也是最后一个可指派网络号为223.255.255。可指派的网络号为$2^{(24-3)} = 2097152$。每个网络可指派的IP地址为$2^8 - 2 = 254$ 一些特殊的IP地址地址0.0.0.0是一个特殊的IPv4地址，只能作为源地址使用，表示“在本网络上的本主机”，封装有DHCP DIscovery报文的IP分组的源地址使用0.0.0.0，不能作为目的地址 受限广播地址：地址255.255.255.255是一个特殊的IPv4地址，只能作为目的地址使用，表示”在本网络上进行进行广播“，各路油器不转发 127.X.X.X是环回地址，127.0.0.1 特指本机地址。 224.0.0.1 组播地址。从224.0.0.0到239.255.255.255都是这样的地址。224.0.0.1特指所有主机，224.0.0.2特指所有路由器。 0.X.X.X。该系列地址仅用来标识主机 169.256.X.X。该系列地址是本地地址，是由操作系统分配，路由器不转发 划分子网的IPv4地址为新增网络申请新的网络号会带来以下弊端： 需要等待和花费更多费用 会增加其他路由器中路由表记录的数量 浪费原有网络中剩余的大量IP地址 所以我们可以从主机号部分借用一部分作为子网号 计算机如何知道分类地址中主机号有多少比特被用作子网号？ 32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号 子网掩码使用连续的比特1来对应网络号和子网号 子网掩码使用连续的比特0来对应主机号 将划分子网的IPv4地址与相对应的子网掩码进行逻辑与运算就可以得到IPv4地址所在的子网的网络地址 默认子网掩码：指在未划分子网的情况下使用子网掩码。A类地址未255.0.0.0，B类地址为255.255.0.0，C类地址为255.255.255.0 无分类编址的IPv4地址无分类域间路由选择CIDR。 CIDR消除了传统A，B ,C类地址以及划分子网的概念 CIDR可以更有效地分配IPv4的地址空间 CIDR使用斜线记法，在IPv4地址后面加上斜线”/“，在斜线后面写上网络前缀(网络号)所占的比特数量 CIDR实际上是将网络前缀都相同的连续IP地址组成一个”CIDR地址块“ 只要知道CIDR地址块的任何一个地址，就可以知道该地址块的全部细节： 地址块的最小地址 地址块的最大地址 地址块的地址数量 地址块聚合某类网络的数量 地址掩码 路由聚合（构造超网） 如何构造：找出路由表中目的地址的共同前缀，然后将找到的共同前缀的后一个字节写成2进制的形式，找出地址的共同前缀，然后计算共同前缀的比特位，并将共同前缀写成点分十进制的形式。在斜杠后写上刚才计算的比特位，得到聚合地址块 网络前缀越长，地址块越小，路由越具体 若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，因为这样的路由更具体 IPv4的应用规划定长子网掩码FLSM变长子网掩码VLSM在一个网络划分成n个子网时，计算出每个子网所需的主机地址，路由器接口地址，网络地址，广播地址，算出所有需要的主机号数目。得出每个子网所需主机号的位数，计算出每个子网对应的网络前缀位数。 分配过程中，每个子块的起点位置不能随意选取，只能选取块大小整数倍地址作为起点，一般先给大的子块分配","path":"2021/05/21/IPv4首部格式/","date":"05-21","excerpt":"网际协议版本4（英语：Internet Protocol version 4，IPv4），又称互联网通信协议第四版，是网际协议开发过程中的第四个修订版本，也是此协议第一个被广泛部署的版本。IPv4是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6，直到2011年，IANA IPv4位址完全用尽时，IPv6仍处在部署的初期","tags":[{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"}]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2021/05/21/hello-world/","date":"05-21","excerpt":"","tags":[]},{"title":"CRC循环冗余码","text":"CRC循环冗余码 收发双方约好一个生成多项式$G(x)$ 发送方基于待发送的数据和生成多项式计算出差错检测码(冗余码)，将其添加到待传输数据的后面一起传输 接收方通过生成多项式来计算收到的数据是否产生误码 例如： \\begin{align} G(x) &= x^4 + x^2 + x + 1 \\\\ &= 1x^4 + 0x^3 + 1x^2 + 1x + 1 \\end{align}生成多项式各项系数构成的比特串为：10111 常用的生成多项式： CRC-16: $x^{16} + x^{15} + x^2 + 1$ CRC-CCITT: $x^{16} + x^{12} + x^{5} + 1$ CRC-32：$x^{32} + x^{26} + x^{23} + x^{22} + x^{16} + x^{12} + x^{11} + x^{10} + x^{8} + x^{7} + x^{5} + x^{4} + x^{2} + x + 1$ 计算差错检测码： 构造被除数，待发送信息后面添加生成多项式最高次数个0 构造除数：生成多项式的比特串 做”除法”,这里除法是将代被除数和除数进行异或 检查余数：余数的位数与多项式最高次数相同，位数不同则补0 发送方： 接收方： 无法纠正错误，检错能力很好，计算复杂但易于用硬件实现，纠错码开销较大，计算机网络较少使用","path":"2021/05/21/CRC循环冗余码/","date":"05-21","excerpt":"","tags":[{"name":"链路层","slug":"链路层","permalink":"https://reiscarlet.github.io/tags/%E9%93%BE%E8%B7%AF%E5%B1%82/"}]}],"categories":[],"tags":[{"name":"物理层","slug":"物理层","permalink":"https://reiscarlet.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"},{"name":"网络传输、设备与企业网架构","slug":"网络传输、设备与企业网架构","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E3%80%81%E8%AE%BE%E5%A4%87%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BD%91%E6%9E%B6%E6%9E%84/"},{"name":"习题","slug":"习题","permalink":"https://reiscarlet.github.io/tags/%E4%B9%A0%E9%A2%98/"},{"name":"计算机网络概述","slug":"计算机网络概述","permalink":"https://reiscarlet.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"},{"name":"网络层","slug":"网络层","permalink":"https://reiscarlet.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/"},{"name":"运输层","slug":"运输层","permalink":"https://reiscarlet.github.io/tags/%E8%BF%90%E8%BE%93%E5%B1%82/"},{"name":"链路层","slug":"链路层","permalink":"https://reiscarlet.github.io/tags/%E9%93%BE%E8%B7%AF%E5%B1%82/"}]}